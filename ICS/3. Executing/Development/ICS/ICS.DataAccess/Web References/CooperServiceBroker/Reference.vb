'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace CooperServiceBroker
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CsbPublicPISoap", [Namespace]:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI")>  _
    Partial Public Class CsbPublicPI
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private PushPalletLocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTesDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientTestsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTestingDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTireTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CooperTire.ICS.DataAccess.My.MySettings.Default.ICS_DataAccess_CooperServiceBroker_CsbPublicPI
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event PushPalletLocationCompleted As PushPalletLocationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTesDataCompleted As GetTesDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientTestsCompleted As GetClientTestsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductDataCompleted As GetProductDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTestingDataCompleted As GetTestingDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTireTypeCompleted As GetTireTypeCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/PushPalletLocation", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PushPalletLocation(ByVal SecurityKey As String, ByVal BranchLoc As String, ByVal PalletID As String, ByVal MarqueeDisplay As String) As String
            Dim results() As Object = Me.Invoke("PushPalletLocation", New Object() {SecurityKey, BranchLoc, PalletID, MarqueeDisplay})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PushPalletLocationAsync(ByVal SecurityKey As String, ByVal BranchLoc As String, ByVal PalletID As String, ByVal MarqueeDisplay As String)
            Me.PushPalletLocationAsync(SecurityKey, BranchLoc, PalletID, MarqueeDisplay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PushPalletLocationAsync(ByVal SecurityKey As String, ByVal BranchLoc As String, ByVal PalletID As String, ByVal MarqueeDisplay As String, ByVal userState As Object)
            If (Me.PushPalletLocationOperationCompleted Is Nothing) Then
                Me.PushPalletLocationOperationCompleted = AddressOf Me.OnPushPalletLocationOperationCompleted
            End If
            Me.InvokeAsync("PushPalletLocation", New Object() {SecurityKey, BranchLoc, PalletID, MarqueeDisplay}, Me.PushPalletLocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPushPalletLocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PushPalletLocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PushPalletLocationCompleted(Me, New PushPalletLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/GetTesData", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTesData(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String, ByVal SAPPlant As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTesData", New Object() {SecurityKey, SAPMaterialNumber, SAPPlant})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTesDataAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String, ByVal SAPPlant As String)
            Me.GetTesDataAsync(SecurityKey, SAPMaterialNumber, SAPPlant, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTesDataAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String, ByVal SAPPlant As String, ByVal userState As Object)
            If (Me.GetTesDataOperationCompleted Is Nothing) Then
                Me.GetTesDataOperationCompleted = AddressOf Me.OnGetTesDataOperationCompleted
            End If
            Me.InvokeAsync("GetTesData", New Object() {SecurityKey, SAPMaterialNumber, SAPPlant}, Me.GetTesDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTesDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTesDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTesDataCompleted(Me, New GetTesDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/GetClientTests", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientTests(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal TireTypeID As String, ByVal dsClientRequestList As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientTests", New Object() {SecurityKey, CertificationTypeID, TireTypeID, dsClientRequestList})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientTestsAsync(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal TireTypeID As String, ByVal dsClientRequestList As System.Data.DataSet)
            Me.GetClientTestsAsync(SecurityKey, CertificationTypeID, TireTypeID, dsClientRequestList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientTestsAsync(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal TireTypeID As String, ByVal dsClientRequestList As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetClientTestsOperationCompleted Is Nothing) Then
                Me.GetClientTestsOperationCompleted = AddressOf Me.OnGetClientTestsOperationCompleted
            End If
            Me.InvokeAsync("GetClientTests", New Object() {SecurityKey, CertificationTypeID, TireTypeID, dsClientRequestList}, Me.GetClientTestsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientTestsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientTestsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientTestsCompleted(Me, New GetClientTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/GetProductData", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductData(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductData", New Object() {SecurityKey, SAPMaterialNumber})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductDataAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String)
            Me.GetProductDataAsync(SecurityKey, SAPMaterialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductDataAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String, ByVal userState As Object)
            If (Me.GetProductDataOperationCompleted Is Nothing) Then
                Me.GetProductDataOperationCompleted = AddressOf Me.OnGetProductDataOperationCompleted
            End If
            Me.InvokeAsync("GetProductData", New Object() {SecurityKey, SAPMaterialNumber}, Me.GetProductDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductDataCompleted(Me, New GetProductDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/GetTestingData", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTestingData(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal SAPMaterialNumber As String, ByVal ManufactureLocationIDs As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTestingData", New Object() {SecurityKey, CertificationTypeID, SAPMaterialNumber, ManufactureLocationIDs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTestingDataAsync(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal SAPMaterialNumber As String, ByVal ManufactureLocationIDs As String)
            Me.GetTestingDataAsync(SecurityKey, CertificationTypeID, SAPMaterialNumber, ManufactureLocationIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTestingDataAsync(ByVal SecurityKey As String, ByVal CertificationTypeID As String, ByVal SAPMaterialNumber As String, ByVal ManufactureLocationIDs As String, ByVal userState As Object)
            If (Me.GetTestingDataOperationCompleted Is Nothing) Then
                Me.GetTestingDataOperationCompleted = AddressOf Me.OnGetTestingDataOperationCompleted
            End If
            Me.InvokeAsync("GetTestingData", New Object() {SecurityKey, CertificationTypeID, SAPMaterialNumber, ManufactureLocationIDs}, Me.GetTestingDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTestingDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTestingDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTestingDataCompleted(Me, New GetTestingDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CooperTire.CooperServiceBroker.WebServices.Public.PI/GetTireType", RequestNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", ResponseNamespace:="http://CooperTire.CooperServiceBroker.WebServices.Public.PI", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTireType(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String) As String
            Dim results() As Object = Me.Invoke("GetTireType", New Object() {SecurityKey, SAPMaterialNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTireTypeAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String)
            Me.GetTireTypeAsync(SecurityKey, SAPMaterialNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTireTypeAsync(ByVal SecurityKey As String, ByVal SAPMaterialNumber As String, ByVal userState As Object)
            If (Me.GetTireTypeOperationCompleted Is Nothing) Then
                Me.GetTireTypeOperationCompleted = AddressOf Me.OnGetTireTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTireType", New Object() {SecurityKey, SAPMaterialNumber}, Me.GetTireTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTireTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTireTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTireTypeCompleted(Me, New GetTireTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub PushPalletLocationCompletedEventHandler(ByVal sender As Object, ByVal e As PushPalletLocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PushPalletLocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTesDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetTesDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTesDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetClientTestsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientTestsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientTestsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetProductDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTestingDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetTestingDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTestingDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTireTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTireTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTireTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
