'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ImarkPassengerDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ImarkPassengerDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableBRAND_VIEW As BRAND_VIEWDataTable
    
    Private tableDEFAULTVALUES_VIEW As DEFAULTVALUES_VIEWDataTable
    
    Private tablePRODUCTDATA_REPORT_VIEW As PRODUCTDATA_REPORT_VIEWDataTable
    
    Private tablePRODBRANDLIST_VIEW As PRODBRANDLIST_VIEWDataTable
    
    Private tableCertificate As CertificateDataTable
    
    Private relationCertificate_BRAND_VIEW As Global.System.Data.DataRelation
    
    Private relationCertificate_DEFAULTVALUES_VIEW As Global.System.Data.DataRelation
    
    Private relationCertificate_PRODUCTDATA_REPORT_VIEW As Global.System.Data.DataRelation
    
    Private relationCertificate_PRODBRANDLIST_VIEW As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BRAND_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New BRAND_VIEWDataTable(ds.Tables("BRAND_VIEW")))
            End If
            If (Not (ds.Tables("DEFAULTVALUES_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New DEFAULTVALUES_VIEWDataTable(ds.Tables("DEFAULTVALUES_VIEW")))
            End If
            If (Not (ds.Tables("PRODUCTDATA_REPORT_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTDATA_REPORT_VIEWDataTable(ds.Tables("PRODUCTDATA_REPORT_VIEW")))
            End If
            If (Not (ds.Tables("PRODBRANDLIST_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODBRANDLIST_VIEWDataTable(ds.Tables("PRODBRANDLIST_VIEW")))
            End If
            If (Not (ds.Tables("Certificate")) Is Nothing) Then
                MyBase.Tables.Add(New CertificateDataTable(ds.Tables("Certificate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BRAND_VIEW() As BRAND_VIEWDataTable
        Get
            Return Me.tableBRAND_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEFAULTVALUES_VIEW() As DEFAULTVALUES_VIEWDataTable
        Get
            Return Me.tableDEFAULTVALUES_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTDATA_REPORT_VIEW() As PRODUCTDATA_REPORT_VIEWDataTable
        Get
            Return Me.tablePRODUCTDATA_REPORT_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODBRANDLIST_VIEW() As PRODBRANDLIST_VIEWDataTable
        Get
            Return Me.tablePRODBRANDLIST_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Certificate() As CertificateDataTable
        Get
            Return Me.tableCertificate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ImarkPassengerDataSet = CType(MyBase.Clone,ImarkPassengerDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("BRAND_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New BRAND_VIEWDataTable(ds.Tables("BRAND_VIEW")))
            End If
            If (Not (ds.Tables("DEFAULTVALUES_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New DEFAULTVALUES_VIEWDataTable(ds.Tables("DEFAULTVALUES_VIEW")))
            End If
            If (Not (ds.Tables("PRODUCTDATA_REPORT_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTDATA_REPORT_VIEWDataTable(ds.Tables("PRODUCTDATA_REPORT_VIEW")))
            End If
            If (Not (ds.Tables("PRODBRANDLIST_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODBRANDLIST_VIEWDataTable(ds.Tables("PRODBRANDLIST_VIEW")))
            End If
            If (Not (ds.Tables("Certificate")) Is Nothing) Then
                MyBase.Tables.Add(New CertificateDataTable(ds.Tables("Certificate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBRAND_VIEW = CType(MyBase.Tables("BRAND_VIEW"),BRAND_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBRAND_VIEW) Is Nothing) Then
                Me.tableBRAND_VIEW.InitVars
            End If
        End If
        Me.tableDEFAULTVALUES_VIEW = CType(MyBase.Tables("DEFAULTVALUES_VIEW"),DEFAULTVALUES_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDEFAULTVALUES_VIEW) Is Nothing) Then
                Me.tableDEFAULTVALUES_VIEW.InitVars
            End If
        End If
        Me.tablePRODUCTDATA_REPORT_VIEW = CType(MyBase.Tables("PRODUCTDATA_REPORT_VIEW"),PRODUCTDATA_REPORT_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTDATA_REPORT_VIEW) Is Nothing) Then
                Me.tablePRODUCTDATA_REPORT_VIEW.InitVars
            End If
        End If
        Me.tablePRODBRANDLIST_VIEW = CType(MyBase.Tables("PRODBRANDLIST_VIEW"),PRODBRANDLIST_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODBRANDLIST_VIEW) Is Nothing) Then
                Me.tablePRODBRANDLIST_VIEW.InitVars
            End If
        End If
        Me.tableCertificate = CType(MyBase.Tables("Certificate"),CertificateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCertificate) Is Nothing) Then
                Me.tableCertificate.InitVars
            End If
        End If
        Me.relationCertificate_BRAND_VIEW = Me.Relations("Certificate_BRAND_VIEW")
        Me.relationCertificate_DEFAULTVALUES_VIEW = Me.Relations("Certificate_DEFAULTVALUES_VIEW")
        Me.relationCertificate_PRODUCTDATA_REPORT_VIEW = Me.Relations("Certificate_PRODUCTDATA_REPORT_VIEW")
        Me.relationCertificate_PRODBRANDLIST_VIEW = Me.Relations("Certificate_PRODBRANDLIST_VIEW")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ImarkPassengerDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ImarkPassengerDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBRAND_VIEW = New BRAND_VIEWDataTable()
        MyBase.Tables.Add(Me.tableBRAND_VIEW)
        Me.tableDEFAULTVALUES_VIEW = New DEFAULTVALUES_VIEWDataTable()
        MyBase.Tables.Add(Me.tableDEFAULTVALUES_VIEW)
        Me.tablePRODUCTDATA_REPORT_VIEW = New PRODUCTDATA_REPORT_VIEWDataTable()
        MyBase.Tables.Add(Me.tablePRODUCTDATA_REPORT_VIEW)
        Me.tablePRODBRANDLIST_VIEW = New PRODBRANDLIST_VIEWDataTable()
        MyBase.Tables.Add(Me.tablePRODBRANDLIST_VIEW)
        Me.tableCertificate = New CertificateDataTable()
        MyBase.Tables.Add(Me.tableCertificate)
        Me.relationCertificate_BRAND_VIEW = New Global.System.Data.DataRelation("Certificate_BRAND_VIEW", New Global.System.Data.DataColumn() {Me.tableCertificate.CERTIFICATENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableBRAND_VIEW.CERTIFICATENUMBERColumn}, false)
        Me.Relations.Add(Me.relationCertificate_BRAND_VIEW)
        Me.relationCertificate_DEFAULTVALUES_VIEW = New Global.System.Data.DataRelation("Certificate_DEFAULTVALUES_VIEW", New Global.System.Data.DataColumn() {Me.tableCertificate.CERTIFICATENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableDEFAULTVALUES_VIEW.CERTIFICATENUMBERColumn}, false)
        Me.Relations.Add(Me.relationCertificate_DEFAULTVALUES_VIEW)
        Me.relationCertificate_PRODUCTDATA_REPORT_VIEW = New Global.System.Data.DataRelation("Certificate_PRODUCTDATA_REPORT_VIEW", New Global.System.Data.DataColumn() {Me.tableCertificate.CERTIFICATENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn}, false)
        Me.Relations.Add(Me.relationCertificate_PRODUCTDATA_REPORT_VIEW)
        Me.relationCertificate_PRODBRANDLIST_VIEW = New Global.System.Data.DataRelation("Certificate_PRODBRANDLIST_VIEW", New Global.System.Data.DataColumn() {Me.tableCertificate.CERTIFICATENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tablePRODBRANDLIST_VIEW.CERTIFICATENUMBERColumn}, false)
        Me.Relations.Add(Me.relationCertificate_PRODBRANDLIST_VIEW)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBRAND_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDEFAULTVALUES_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePRODUCTDATA_REPORT_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePRODBRANDLIST_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCertificate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BRAND_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As BRAND_VIEWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DEFAULTVALUES_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As DEFAULTVALUES_VIEWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PRODUCTDATA_REPORT_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTDATA_REPORT_VIEWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PRODBRANDLIST_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODBRANDLIST_VIEWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CertificateRowChangeEventHandler(ByVal sender As Object, ByVal e As CertificateRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BRAND_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBRANDCODE As Global.System.Data.DataColumn
        
        Private columnBRANDNAME As Global.System.Data.DataColumn
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BRAND_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BRANDCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BRANDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BRAND_VIEWRow
            Get
                Return CType(Me.Rows(index),BRAND_VIEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BRAND_VIEWRowChanging As BRAND_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BRAND_VIEWRowChanged As BRAND_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BRAND_VIEWRowDeleting As BRAND_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BRAND_VIEWRowDeleted As BRAND_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBRAND_VIEWRow(ByVal row As BRAND_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBRAND_VIEWRow(ByVal BRANDCODE As String, ByVal BRANDNAME As String, ByVal parentCertificateRowByCertificate_BRAND_VIEW As CertificateRow) As BRAND_VIEWRow
            Dim rowBRAND_VIEWRow As BRAND_VIEWRow = CType(Me.NewRow,BRAND_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {BRANDCODE, BRANDNAME, Nothing}
            If (Not (parentCertificateRowByCertificate_BRAND_VIEW) Is Nothing) Then
                columnValuesArray(2) = parentCertificateRowByCertificate_BRAND_VIEW(0)
            End If
            rowBRAND_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBRAND_VIEWRow)
            Return rowBRAND_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BRAND_VIEWDataTable = CType(MyBase.Clone,BRAND_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BRAND_VIEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnBRANDCODE = MyBase.Columns("BRANDCODE")
            Me.columnBRANDNAME = MyBase.Columns("BRANDNAME")
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnBRANDCODE = New Global.System.Data.DataColumn("BRANDCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDCODE)
            Me.columnBRANDNAME = New Global.System.Data.DataColumn("BRANDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDNAME)
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnBRANDCODE.AllowDBNull = false
            Me.columnBRANDCODE.MaxLength = 10
            Me.columnBRANDNAME.AllowDBNull = false
            Me.columnBRANDNAME.MaxLength = 100
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.MaxLength = 80
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBRAND_VIEWRow() As BRAND_VIEWRow
            Return CType(Me.NewRow,BRAND_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BRAND_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BRAND_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BRAND_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent BRAND_VIEWRowChanged(Me, New BRAND_VIEWRowChangeEvent(CType(e.Row,BRAND_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BRAND_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent BRAND_VIEWRowChanging(Me, New BRAND_VIEWRowChangeEvent(CType(e.Row,BRAND_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BRAND_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent BRAND_VIEWRowDeleted(Me, New BRAND_VIEWRowChangeEvent(CType(e.Row,BRAND_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BRAND_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent BRAND_VIEWRowDeleting(Me, New BRAND_VIEWRowChangeEvent(CType(e.Row,BRAND_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBRAND_VIEWRow(ByVal row As BRAND_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BRAND_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DEFAULTVALUES_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnSUPPLIERNAME_I As Global.System.Data.DataColumn
        
        Private columnCOMPLETEADDRESS_I As Global.System.Data.DataColumn
        
        Private columnCOUNTRYOFORIGIN_I As Global.System.Data.DataColumn
        
        Private columnTELEPHONE_I As Global.System.Data.DataColumn
        
        Private columnFAX_I As Global.System.Data.DataColumn
        
        Private columnMANUFACTURERNAME_I As Global.System.Data.DataColumn
        
        Private columnTECHNICALDEVELOPMENTCENTER_I As Global.System.Data.DataColumn
        
        Private columnAPPLICANTNAME_I As Global.System.Data.DataColumn
        
        Private columnAPPLICANTTITLE_I As Global.System.Data.DataColumn
        
        Private columnASSOCIATEDPLANT_I As Global.System.Data.DataColumn
        
        Private columnOTHERASPECTS_I As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DEFAULTVALUES_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLIERNAME_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIERNAME_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COMPLETEADDRESS_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPLETEADDRESS_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COUNTRYOFORIGIN_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRYOFORIGIN_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TELEPHONE_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEPHONE_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FAX_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MANUFACTURERNAME_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANUFACTURERNAME_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TECHNICALDEVELOPMENTCENTER_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTECHNICALDEVELOPMENTCENTER_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property APPLICANTNAME_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPPLICANTNAME_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property APPLICANTTITLE_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPPLICANTTITLE_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ASSOCIATEDPLANT_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSOCIATEDPLANT_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OTHERASPECTS_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTHERASPECTS_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEFAULTVALUES_VIEWRow
            Get
                Return CType(Me.Rows(index),DEFAULTVALUES_VIEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEFAULTVALUES_VIEWRowChanging As DEFAULTVALUES_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEFAULTVALUES_VIEWRowChanged As DEFAULTVALUES_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEFAULTVALUES_VIEWRowDeleting As DEFAULTVALUES_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEFAULTVALUES_VIEWRowDeleted As DEFAULTVALUES_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDEFAULTVALUES_VIEWRow(ByVal row As DEFAULTVALUES_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDEFAULTVALUES_VIEWRow(ByVal parentCertificateRowByCertificate_DEFAULTVALUES_VIEW As CertificateRow, ByVal SUPPLIERNAME_I As String, ByVal COMPLETEADDRESS_I As String, ByVal COUNTRYOFORIGIN_I As String, ByVal TELEPHONE_I As String, ByVal FAX_I As String, ByVal MANUFACTURERNAME_I As String, ByVal TECHNICALDEVELOPMENTCENTER_I As String, ByVal APPLICANTNAME_I As String, ByVal APPLICANTTITLE_I As String, ByVal ASSOCIATEDPLANT_I As String, ByVal OTHERASPECTS_I As String) As DEFAULTVALUES_VIEWRow
            Dim rowDEFAULTVALUES_VIEWRow As DEFAULTVALUES_VIEWRow = CType(Me.NewRow,DEFAULTVALUES_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SUPPLIERNAME_I, COMPLETEADDRESS_I, COUNTRYOFORIGIN_I, TELEPHONE_I, FAX_I, MANUFACTURERNAME_I, TECHNICALDEVELOPMENTCENTER_I, APPLICANTNAME_I, APPLICANTTITLE_I, ASSOCIATEDPLANT_I, OTHERASPECTS_I}
            If (Not (parentCertificateRowByCertificate_DEFAULTVALUES_VIEW) Is Nothing) Then
                columnValuesArray(0) = parentCertificateRowByCertificate_DEFAULTVALUES_VIEW(0)
            End If
            rowDEFAULTVALUES_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDEFAULTVALUES_VIEWRow)
            Return rowDEFAULTVALUES_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DEFAULTVALUES_VIEWDataTable = CType(MyBase.Clone,DEFAULTVALUES_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DEFAULTVALUES_VIEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnSUPPLIERNAME_I = MyBase.Columns("SUPPLIERNAME_I")
            Me.columnCOMPLETEADDRESS_I = MyBase.Columns("COMPLETEADDRESS_I")
            Me.columnCOUNTRYOFORIGIN_I = MyBase.Columns("COUNTRYOFORIGIN_I")
            Me.columnTELEPHONE_I = MyBase.Columns("TELEPHONE_I")
            Me.columnFAX_I = MyBase.Columns("FAX_I")
            Me.columnMANUFACTURERNAME_I = MyBase.Columns("MANUFACTURERNAME_I")
            Me.columnTECHNICALDEVELOPMENTCENTER_I = MyBase.Columns("TECHNICALDEVELOPMENTCENTER_I")
            Me.columnAPPLICANTNAME_I = MyBase.Columns("APPLICANTNAME_I")
            Me.columnAPPLICANTTITLE_I = MyBase.Columns("APPLICANTTITLE_I")
            Me.columnASSOCIATEDPLANT_I = MyBase.Columns("ASSOCIATEDPLANT_I")
            Me.columnOTHERASPECTS_I = MyBase.Columns("OTHERASPECTS_I")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnSUPPLIERNAME_I = New Global.System.Data.DataColumn("SUPPLIERNAME_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIERNAME_I)
            Me.columnCOMPLETEADDRESS_I = New Global.System.Data.DataColumn("COMPLETEADDRESS_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPLETEADDRESS_I)
            Me.columnCOUNTRYOFORIGIN_I = New Global.System.Data.DataColumn("COUNTRYOFORIGIN_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRYOFORIGIN_I)
            Me.columnTELEPHONE_I = New Global.System.Data.DataColumn("TELEPHONE_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEPHONE_I)
            Me.columnFAX_I = New Global.System.Data.DataColumn("FAX_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX_I)
            Me.columnMANUFACTURERNAME_I = New Global.System.Data.DataColumn("MANUFACTURERNAME_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANUFACTURERNAME_I)
            Me.columnTECHNICALDEVELOPMENTCENTER_I = New Global.System.Data.DataColumn("TECHNICALDEVELOPMENTCENTER_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTECHNICALDEVELOPMENTCENTER_I)
            Me.columnAPPLICANTNAME_I = New Global.System.Data.DataColumn("APPLICANTNAME_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPPLICANTNAME_I)
            Me.columnAPPLICANTTITLE_I = New Global.System.Data.DataColumn("APPLICANTTITLE_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPPLICANTTITLE_I)
            Me.columnASSOCIATEDPLANT_I = New Global.System.Data.DataColumn("ASSOCIATEDPLANT_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSOCIATEDPLANT_I)
            Me.columnOTHERASPECTS_I = New Global.System.Data.DataColumn("OTHERASPECTS_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTHERASPECTS_I)
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnSUPPLIERNAME_I.Caption = "MANUFACTURERNAME_E"
            Me.columnCOMPLETEADDRESS_I.Caption = "MANUFACTURERNAMEADDRESS_E"
            Me.columnCOUNTRYOFORIGIN_I.Caption = "TECHNICALSERVICE_E"
            Me.columnTELEPHONE_I.Caption = "PLACE_E"
            Me.columnFAX_I.Caption = "MEASURERIM_E"
            Me.columnMANUFACTURERNAME_I.Caption = "INFLATIONPRESSURE_E"
            Me.columnTECHNICALDEVELOPMENTCENTER_I.Caption = "TESTLABORATORY_E"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDEFAULTVALUES_VIEWRow() As DEFAULTVALUES_VIEWRow
            Return CType(Me.NewRow,DEFAULTVALUES_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DEFAULTVALUES_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DEFAULTVALUES_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEFAULTVALUES_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent DEFAULTVALUES_VIEWRowChanged(Me, New DEFAULTVALUES_VIEWRowChangeEvent(CType(e.Row,DEFAULTVALUES_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEFAULTVALUES_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent DEFAULTVALUES_VIEWRowChanging(Me, New DEFAULTVALUES_VIEWRowChangeEvent(CType(e.Row,DEFAULTVALUES_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEFAULTVALUES_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent DEFAULTVALUES_VIEWRowDeleted(Me, New DEFAULTVALUES_VIEWRowChangeEvent(CType(e.Row,DEFAULTVALUES_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEFAULTVALUES_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent DEFAULTVALUES_VIEWRowDeleting(Me, New DEFAULTVALUES_VIEWRowChangeEvent(CType(e.Row,DEFAULTVALUES_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDEFAULTVALUES_VIEWRow(ByVal row As DEFAULTVALUES_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DEFAULTVALUES_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTDATA_REPORT_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSKUID As Global.System.Data.DataColumn
        
        Private columnSKU As Global.System.Data.DataColumn
        
        Private columnBRANDCODE As Global.System.Data.DataColumn
        
        Private columnTIRETYPEID As Global.System.Data.DataColumn
        
        Private columnNPRID As Global.System.Data.DataColumn
        
        Private columnSIZESTAMP As Global.System.Data.DataColumn
        
        Private columnDISCONTINUEDDATE As Global.System.Data.DataColumn
        
        Private columnSPECNUMBER As Global.System.Data.DataColumn
        
        Private columnSPEEDRATING As Global.System.Data.DataColumn
        
        Private columnSINGLOADINDEX As Global.System.Data.DataColumn
        
        Private columnDUALLOADINDEX As Global.System.Data.DataColumn
        
        Private columnBELTEDRADIALYN As Global.System.Data.DataColumn
        
        Private columnTUBELESSYN As Global.System.Data.DataColumn
        
        Private columnREINFORCEDYN As Global.System.Data.DataColumn
        
        Private columnEXTRALOADYN As Global.System.Data.DataColumn
        
        Private columnMEASURINGRIM As Global.System.Data.DataColumn
        
        Private columnUTQGTREADWEAR As Global.System.Data.DataColumn
        
        Private columnUTQGTRACTION As Global.System.Data.DataColumn
        
        Private columnUTQGTEMP As Global.System.Data.DataColumn
        
        Private columnMUDSNOWYN As Global.System.Data.DataColumn
        
        Private columnRIMDIAMETER As Global.System.Data.DataColumn
        
        Private columnSERIALDATE As Global.System.Data.DataColumn
        
        Private columnBRANDDESC As Global.System.Data.DataColumn
        
        Private columnLOADRANGE As Global.System.Data.DataColumn
        
        Private columnMEARIMWIDTH As Global.System.Data.DataColumn
        
        Private columnREGROOVABLEIND As Global.System.Data.DataColumn
        
        Private columnPLANTPRODUCED As Global.System.Data.DataColumn
        
        Private columnMOSTRECENTTESTDATE As Global.System.Data.DataColumn
        
        Private columnIMARK As Global.System.Data.DataColumn
        
        Private columnINFORMENUMBER As Global.System.Data.DataColumn
        
        Private columnFECHADATE As Global.System.Data.DataColumn
        
        Private columnTREADPATTERN As Global.System.Data.DataColumn
        
        Private columnSPECIALPROTECTIVEBAND As Global.System.Data.DataColumn
        
        Private columnNOMINALTIREWIDTH As Global.System.Data.DataColumn
        
        Private columnASPECTRADIO As Global.System.Data.DataColumn
        
        Private columnTREADWEARINDICATORS As Global.System.Data.DataColumn
        
        Private columnNAMEOFMANUFACTURER As Global.System.Data.DataColumn
        
        Private columnFAMILY As Global.System.Data.DataColumn
        
        Private columnDOTSERIALNUMBER As Global.System.Data.DataColumn
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnSUPPLEMENTALEXTENSION_EN As Global.System.Data.DataColumn
        
        Private columnEXTENSION_EN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTDATA_REPORT_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SKUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SKUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BRANDCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIRETYPEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIRETYPEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NPRIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNPRID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SIZESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIZESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DISCONTINUEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCONTINUEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPECNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPEEDRATINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPEEDRATING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SINGLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSINGLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DUALLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUALLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BELTEDRADIALYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBELTEDRADIALYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TUBELESSYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUBELESSYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REINFORCEDYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREINFORCEDYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTRALOADYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTRALOADYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEASURINGRIMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEASURINGRIM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UTQGTREADWEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTREADWEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UTQGTRACTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTRACTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UTQGTEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MUDSNOWYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUDSNOWYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RIMDIAMETERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIMDIAMETER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIALDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIALDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BRANDDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOADRANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOADRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEARIMWIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEARIMWIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REGROOVABLEINDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREGROOVABLEIND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLANTPRODUCEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTPRODUCED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MOSTRECENTTESTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOSTRECENTTESTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IMARKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMARK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INFORMENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINFORMENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHADATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHADATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TREADPATTERNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTREADPATTERN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPECIALPROTECTIVEBANDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIALPROTECTIVEBAND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMINALTIREWIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMINALTIREWIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ASPECTRADIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASPECTRADIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TREADWEARINDICATORSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTREADWEARINDICATORS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NAMEOFMANUFACTURERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAMEOFMANUFACTURER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DOTSERIALNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOTSERIALNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLEMENTALEXTENSION_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLEMENTALEXTENSION_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTENSION_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTDATA_REPORT_VIEWRow
            Get
                Return CType(Me.Rows(index),PRODUCTDATA_REPORT_VIEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTDATA_REPORT_VIEWRowChanging As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTDATA_REPORT_VIEWRowChanged As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTDATA_REPORT_VIEWRowDeleting As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTDATA_REPORT_VIEWRowDeleted As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPRODUCTDATA_REPORT_VIEWRow(ByVal row As PRODUCTDATA_REPORT_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPRODUCTDATA_REPORT_VIEWRow( _
                    ByVal SKUID As Decimal,  _
                    ByVal SKU As String,  _
                    ByVal BRANDCODE As String,  _
                    ByVal TIRETYPEID As Decimal,  _
                    ByVal NPRID As Decimal,  _
                    ByVal SIZESTAMP As String,  _
                    ByVal DISCONTINUEDDATE As Date,  _
                    ByVal SPECNUMBER As String,  _
                    ByVal SPEEDRATING As String,  _
                    ByVal SINGLOADINDEX As String,  _
                    ByVal DUALLOADINDEX As String,  _
                    ByVal BELTEDRADIALYN As String,  _
                    ByVal TUBELESSYN As String,  _
                    ByVal REINFORCEDYN As String,  _
                    ByVal EXTRALOADYN As String,  _
                    ByVal MEASURINGRIM As String,  _
                    ByVal UTQGTREADWEAR As String,  _
                    ByVal UTQGTRACTION As String,  _
                    ByVal UTQGTEMP As String,  _
                    ByVal MUDSNOWYN As String,  _
                    ByVal RIMDIAMETER As Decimal,  _
                    ByVal SERIALDATE As Date,  _
                    ByVal BRANDDESC As String,  _
                    ByVal LOADRANGE As String,  _
                    ByVal MEARIMWIDTH As Decimal,  _
                    ByVal REGROOVABLEIND As String,  _
                    ByVal PLANTPRODUCED As String,  _
                    ByVal MOSTRECENTTESTDATE As Date,  _
                    ByVal IMARK As String,  _
                    ByVal INFORMENUMBER As String,  _
                    ByVal FECHADATE As Date,  _
                    ByVal TREADPATTERN As String,  _
                    ByVal SPECIALPROTECTIVEBAND As String,  _
                    ByVal NOMINALTIREWIDTH As String,  _
                    ByVal ASPECTRADIO As String,  _
                    ByVal TREADWEARINDICATORS As String,  _
                    ByVal NAMEOFMANUFACTURER As String,  _
                    ByVal FAMILY As String,  _
                    ByVal DOTSERIALNUMBER As String,  _
                    ByVal parentCertificateRowByCertificate_PRODUCTDATA_REPORT_VIEW As CertificateRow,  _
                    ByVal SUPPLEMENTALEXTENSION_EN As String,  _
                    ByVal EXTENSION_EN As String) As PRODUCTDATA_REPORT_VIEWRow
            Dim rowPRODUCTDATA_REPORT_VIEWRow As PRODUCTDATA_REPORT_VIEWRow = CType(Me.NewRow,PRODUCTDATA_REPORT_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {SKUID, SKU, BRANDCODE, TIRETYPEID, NPRID, SIZESTAMP, DISCONTINUEDDATE, SPECNUMBER, SPEEDRATING, SINGLOADINDEX, DUALLOADINDEX, BELTEDRADIALYN, TUBELESSYN, REINFORCEDYN, EXTRALOADYN, MEASURINGRIM, UTQGTREADWEAR, UTQGTRACTION, UTQGTEMP, MUDSNOWYN, RIMDIAMETER, SERIALDATE, BRANDDESC, LOADRANGE, MEARIMWIDTH, REGROOVABLEIND, PLANTPRODUCED, MOSTRECENTTESTDATE, IMARK, INFORMENUMBER, FECHADATE, TREADPATTERN, SPECIALPROTECTIVEBAND, NOMINALTIREWIDTH, ASPECTRADIO, TREADWEARINDICATORS, NAMEOFMANUFACTURER, FAMILY, DOTSERIALNUMBER, Nothing, SUPPLEMENTALEXTENSION_EN, EXTENSION_EN}
            If (Not (parentCertificateRowByCertificate_PRODUCTDATA_REPORT_VIEW) Is Nothing) Then
                columnValuesArray(39) = parentCertificateRowByCertificate_PRODUCTDATA_REPORT_VIEW(0)
            End If
            rowPRODUCTDATA_REPORT_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTDATA_REPORT_VIEWRow)
            Return rowPRODUCTDATA_REPORT_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTDATA_REPORT_VIEWDataTable = CType(MyBase.Clone,PRODUCTDATA_REPORT_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTDATA_REPORT_VIEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSKUID = MyBase.Columns("SKUID")
            Me.columnSKU = MyBase.Columns("SKU")
            Me.columnBRANDCODE = MyBase.Columns("BRANDCODE")
            Me.columnTIRETYPEID = MyBase.Columns("TIRETYPEID")
            Me.columnNPRID = MyBase.Columns("NPRID")
            Me.columnSIZESTAMP = MyBase.Columns("SIZESTAMP")
            Me.columnDISCONTINUEDDATE = MyBase.Columns("DISCONTINUEDDATE")
            Me.columnSPECNUMBER = MyBase.Columns("SPECNUMBER")
            Me.columnSPEEDRATING = MyBase.Columns("SPEEDRATING")
            Me.columnSINGLOADINDEX = MyBase.Columns("SINGLOADINDEX")
            Me.columnDUALLOADINDEX = MyBase.Columns("DUALLOADINDEX")
            Me.columnBELTEDRADIALYN = MyBase.Columns("BELTEDRADIALYN")
            Me.columnTUBELESSYN = MyBase.Columns("TUBELESSYN")
            Me.columnREINFORCEDYN = MyBase.Columns("REINFORCEDYN")
            Me.columnEXTRALOADYN = MyBase.Columns("EXTRALOADYN")
            Me.columnMEASURINGRIM = MyBase.Columns("MEASURINGRIM")
            Me.columnUTQGTREADWEAR = MyBase.Columns("UTQGTREADWEAR")
            Me.columnUTQGTRACTION = MyBase.Columns("UTQGTRACTION")
            Me.columnUTQGTEMP = MyBase.Columns("UTQGTEMP")
            Me.columnMUDSNOWYN = MyBase.Columns("MUDSNOWYN")
            Me.columnRIMDIAMETER = MyBase.Columns("RIMDIAMETER")
            Me.columnSERIALDATE = MyBase.Columns("SERIALDATE")
            Me.columnBRANDDESC = MyBase.Columns("BRANDDESC")
            Me.columnLOADRANGE = MyBase.Columns("LOADRANGE")
            Me.columnMEARIMWIDTH = MyBase.Columns("MEARIMWIDTH")
            Me.columnREGROOVABLEIND = MyBase.Columns("REGROOVABLEIND")
            Me.columnPLANTPRODUCED = MyBase.Columns("PLANTPRODUCED")
            Me.columnMOSTRECENTTESTDATE = MyBase.Columns("MOSTRECENTTESTDATE")
            Me.columnIMARK = MyBase.Columns("IMARK")
            Me.columnINFORMENUMBER = MyBase.Columns("INFORMENUMBER")
            Me.columnFECHADATE = MyBase.Columns("FECHADATE")
            Me.columnTREADPATTERN = MyBase.Columns("TREADPATTERN")
            Me.columnSPECIALPROTECTIVEBAND = MyBase.Columns("SPECIALPROTECTIVEBAND")
            Me.columnNOMINALTIREWIDTH = MyBase.Columns("NOMINALTIREWIDTH")
            Me.columnASPECTRADIO = MyBase.Columns("ASPECTRADIO")
            Me.columnTREADWEARINDICATORS = MyBase.Columns("TREADWEARINDICATORS")
            Me.columnNAMEOFMANUFACTURER = MyBase.Columns("NAMEOFMANUFACTURER")
            Me.columnFAMILY = MyBase.Columns("FAMILY")
            Me.columnDOTSERIALNUMBER = MyBase.Columns("DOTSERIALNUMBER")
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnSUPPLEMENTALEXTENSION_EN = MyBase.Columns("SUPPLEMENTALEXTENSION_EN")
            Me.columnEXTENSION_EN = MyBase.Columns("EXTENSION_EN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSKUID = New Global.System.Data.DataColumn("SKUID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKUID)
            Me.columnSKU = New Global.System.Data.DataColumn("SKU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU)
            Me.columnBRANDCODE = New Global.System.Data.DataColumn("BRANDCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDCODE)
            Me.columnTIRETYPEID = New Global.System.Data.DataColumn("TIRETYPEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIRETYPEID)
            Me.columnNPRID = New Global.System.Data.DataColumn("NPRID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNPRID)
            Me.columnSIZESTAMP = New Global.System.Data.DataColumn("SIZESTAMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIZESTAMP)
            Me.columnDISCONTINUEDDATE = New Global.System.Data.DataColumn("DISCONTINUEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCONTINUEDDATE)
            Me.columnSPECNUMBER = New Global.System.Data.DataColumn("SPECNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECNUMBER)
            Me.columnSPEEDRATING = New Global.System.Data.DataColumn("SPEEDRATING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPEEDRATING)
            Me.columnSINGLOADINDEX = New Global.System.Data.DataColumn("SINGLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSINGLOADINDEX)
            Me.columnDUALLOADINDEX = New Global.System.Data.DataColumn("DUALLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUALLOADINDEX)
            Me.columnBELTEDRADIALYN = New Global.System.Data.DataColumn("BELTEDRADIALYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBELTEDRADIALYN)
            Me.columnTUBELESSYN = New Global.System.Data.DataColumn("TUBELESSYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUBELESSYN)
            Me.columnREINFORCEDYN = New Global.System.Data.DataColumn("REINFORCEDYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREINFORCEDYN)
            Me.columnEXTRALOADYN = New Global.System.Data.DataColumn("EXTRALOADYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTRALOADYN)
            Me.columnMEASURINGRIM = New Global.System.Data.DataColumn("MEASURINGRIM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEASURINGRIM)
            Me.columnUTQGTREADWEAR = New Global.System.Data.DataColumn("UTQGTREADWEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTREADWEAR)
            Me.columnUTQGTRACTION = New Global.System.Data.DataColumn("UTQGTRACTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTRACTION)
            Me.columnUTQGTEMP = New Global.System.Data.DataColumn("UTQGTEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTEMP)
            Me.columnMUDSNOWYN = New Global.System.Data.DataColumn("MUDSNOWYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUDSNOWYN)
            Me.columnRIMDIAMETER = New Global.System.Data.DataColumn("RIMDIAMETER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIMDIAMETER)
            Me.columnSERIALDATE = New Global.System.Data.DataColumn("SERIALDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIALDATE)
            Me.columnBRANDDESC = New Global.System.Data.DataColumn("BRANDDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDDESC)
            Me.columnLOADRANGE = New Global.System.Data.DataColumn("LOADRANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOADRANGE)
            Me.columnMEARIMWIDTH = New Global.System.Data.DataColumn("MEARIMWIDTH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEARIMWIDTH)
            Me.columnREGROOVABLEIND = New Global.System.Data.DataColumn("REGROOVABLEIND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREGROOVABLEIND)
            Me.columnPLANTPRODUCED = New Global.System.Data.DataColumn("PLANTPRODUCED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTPRODUCED)
            Me.columnMOSTRECENTTESTDATE = New Global.System.Data.DataColumn("MOSTRECENTTESTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOSTRECENTTESTDATE)
            Me.columnIMARK = New Global.System.Data.DataColumn("IMARK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMARK)
            Me.columnINFORMENUMBER = New Global.System.Data.DataColumn("INFORMENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINFORMENUMBER)
            Me.columnFECHADATE = New Global.System.Data.DataColumn("FECHADATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHADATE)
            Me.columnTREADPATTERN = New Global.System.Data.DataColumn("TREADPATTERN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTREADPATTERN)
            Me.columnSPECIALPROTECTIVEBAND = New Global.System.Data.DataColumn("SPECIALPROTECTIVEBAND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIALPROTECTIVEBAND)
            Me.columnNOMINALTIREWIDTH = New Global.System.Data.DataColumn("NOMINALTIREWIDTH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMINALTIREWIDTH)
            Me.columnASPECTRADIO = New Global.System.Data.DataColumn("ASPECTRADIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASPECTRADIO)
            Me.columnTREADWEARINDICATORS = New Global.System.Data.DataColumn("TREADWEARINDICATORS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTREADWEARINDICATORS)
            Me.columnNAMEOFMANUFACTURER = New Global.System.Data.DataColumn("NAMEOFMANUFACTURER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAMEOFMANUFACTURER)
            Me.columnFAMILY = New Global.System.Data.DataColumn("FAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILY)
            Me.columnDOTSERIALNUMBER = New Global.System.Data.DataColumn("DOTSERIALNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOTSERIALNUMBER)
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnSUPPLEMENTALEXTENSION_EN = New Global.System.Data.DataColumn("SUPPLEMENTALEXTENSION_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLEMENTALEXTENSION_EN)
            Me.columnEXTENSION_EN = New Global.System.Data.DataColumn("EXTENSION_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION_EN)
            Me.columnSKUID.AllowDBNull = false
            Me.columnSKU.AllowDBNull = false
            Me.columnSKU.MaxLength = 30
            Me.columnBRANDCODE.MaxLength = 10
            Me.columnSIZESTAMP.AllowDBNull = false
            Me.columnSIZESTAMP.MaxLength = 20
            Me.columnSPECNUMBER.MaxLength = 30
            Me.columnSPEEDRATING.MaxLength = 40
            Me.columnSINGLOADINDEX.MaxLength = 40
            Me.columnDUALLOADINDEX.MaxLength = 40
            Me.columnBELTEDRADIALYN.MaxLength = 4
            Me.columnTUBELESSYN.MaxLength = 4
            Me.columnREINFORCEDYN.MaxLength = 4
            Me.columnEXTRALOADYN.MaxLength = 4
            Me.columnMEASURINGRIM.MaxLength = 40
            Me.columnUTQGTREADWEAR.MaxLength = 40
            Me.columnUTQGTRACTION.MaxLength = 40
            Me.columnUTQGTEMP.MaxLength = 40
            Me.columnMUDSNOWYN.MaxLength = 4
            Me.columnBRANDDESC.MaxLength = 400
            Me.columnLOADRANGE.MaxLength = 120
            Me.columnREGROOVABLEIND.MaxLength = 120
            Me.columnPLANTPRODUCED.MaxLength = 200
            Me.columnIMARK.MaxLength = 120
            Me.columnINFORMENUMBER.MaxLength = 50
            Me.columnTREADPATTERN.MaxLength = 50
            Me.columnSPECIALPROTECTIVEBAND.MaxLength = 50
            Me.columnNOMINALTIREWIDTH.MaxLength = 50
            Me.columnASPECTRADIO.MaxLength = 50
            Me.columnTREADWEARINDICATORS.MaxLength = 50
            Me.columnNAMEOFMANUFACTURER.MaxLength = 100
            Me.columnFAMILY.MaxLength = 50
            Me.columnDOTSERIALNUMBER.MaxLength = 15
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnSUPPLEMENTALEXTENSION_EN.MaxLength = 30
            Me.columnEXTENSION_EN.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPRODUCTDATA_REPORT_VIEWRow() As PRODUCTDATA_REPORT_VIEWRow
            Return CType(Me.NewRow,PRODUCTDATA_REPORT_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTDATA_REPORT_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTDATA_REPORT_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowChanged(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowChanging(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowDeleted(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowDeleting(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePRODUCTDATA_REPORT_VIEWRow(ByVal row As PRODUCTDATA_REPORT_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTDATA_REPORT_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODBRANDLIST_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSIZESTAMP As Global.System.Data.DataColumn
        
        Private columnBRANDDESC As Global.System.Data.DataColumn
        
        Private columnSPEEDRATING As Global.System.Data.DataColumn
        
        Private columnSINGLOADINDEX As Global.System.Data.DataColumn
        
        Private columnDUALLOADINDEX As Global.System.Data.DataColumn
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnCERTIFICATIONTYPEID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODBRANDLIST_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SIZESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIZESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BRANDDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPEEDRATINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPEEDRATING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SINGLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSINGLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DUALLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUALLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATIONTYPEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATIONTYPEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODBRANDLIST_VIEWRow
            Get
                Return CType(Me.Rows(index),PRODBRANDLIST_VIEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODBRANDLIST_VIEWRowChanging As PRODBRANDLIST_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODBRANDLIST_VIEWRowChanged As PRODBRANDLIST_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODBRANDLIST_VIEWRowDeleting As PRODBRANDLIST_VIEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODBRANDLIST_VIEWRowDeleted As PRODBRANDLIST_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPRODBRANDLIST_VIEWRow(ByVal row As PRODBRANDLIST_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPRODBRANDLIST_VIEWRow(ByVal SIZESTAMP As String, ByVal BRANDDESC As String, ByVal SPEEDRATING As String, ByVal SINGLOADINDEX As String, ByVal DUALLOADINDEX As String, ByVal parentCertificateRowByCertificate_PRODBRANDLIST_VIEW As CertificateRow, ByVal CERTIFICATIONTYPEID As Decimal) As PRODBRANDLIST_VIEWRow
            Dim rowPRODBRANDLIST_VIEWRow As PRODBRANDLIST_VIEWRow = CType(Me.NewRow,PRODBRANDLIST_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {SIZESTAMP, BRANDDESC, SPEEDRATING, SINGLOADINDEX, DUALLOADINDEX, Nothing, CERTIFICATIONTYPEID}
            If (Not (parentCertificateRowByCertificate_PRODBRANDLIST_VIEW) Is Nothing) Then
                columnValuesArray(5) = parentCertificateRowByCertificate_PRODBRANDLIST_VIEW(0)
            End If
            rowPRODBRANDLIST_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODBRANDLIST_VIEWRow)
            Return rowPRODBRANDLIST_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODBRANDLIST_VIEWDataTable = CType(MyBase.Clone,PRODBRANDLIST_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODBRANDLIST_VIEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSIZESTAMP = MyBase.Columns("SIZESTAMP")
            Me.columnBRANDDESC = MyBase.Columns("BRANDDESC")
            Me.columnSPEEDRATING = MyBase.Columns("SPEEDRATING")
            Me.columnSINGLOADINDEX = MyBase.Columns("SINGLOADINDEX")
            Me.columnDUALLOADINDEX = MyBase.Columns("DUALLOADINDEX")
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnCERTIFICATIONTYPEID = MyBase.Columns("CERTIFICATIONTYPEID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSIZESTAMP = New Global.System.Data.DataColumn("SIZESTAMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIZESTAMP)
            Me.columnBRANDDESC = New Global.System.Data.DataColumn("BRANDDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDDESC)
            Me.columnSPEEDRATING = New Global.System.Data.DataColumn("SPEEDRATING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPEEDRATING)
            Me.columnSINGLOADINDEX = New Global.System.Data.DataColumn("SINGLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSINGLOADINDEX)
            Me.columnDUALLOADINDEX = New Global.System.Data.DataColumn("DUALLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUALLOADINDEX)
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnCERTIFICATIONTYPEID = New Global.System.Data.DataColumn("CERTIFICATIONTYPEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATIONTYPEID)
            Me.columnSIZESTAMP.AllowDBNull = false
            Me.columnSIZESTAMP.MaxLength = 20
            Me.columnBRANDDESC.MaxLength = 400
            Me.columnSPEEDRATING.MaxLength = 40
            Me.columnSINGLOADINDEX.MaxLength = 40
            Me.columnDUALLOADINDEX.MaxLength = 40
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnCERTIFICATIONTYPEID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPRODBRANDLIST_VIEWRow() As PRODBRANDLIST_VIEWRow
            Return CType(Me.NewRow,PRODBRANDLIST_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODBRANDLIST_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODBRANDLIST_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODBRANDLIST_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODBRANDLIST_VIEWRowChanged(Me, New PRODBRANDLIST_VIEWRowChangeEvent(CType(e.Row,PRODBRANDLIST_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODBRANDLIST_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODBRANDLIST_VIEWRowChanging(Me, New PRODBRANDLIST_VIEWRowChangeEvent(CType(e.Row,PRODBRANDLIST_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODBRANDLIST_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODBRANDLIST_VIEWRowDeleted(Me, New PRODBRANDLIST_VIEWRowChangeEvent(CType(e.Row,PRODBRANDLIST_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODBRANDLIST_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODBRANDLIST_VIEWRowDeleting(Me, New PRODBRANDLIST_VIEWRowChangeEvent(CType(e.Row,PRODBRANDLIST_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePRODBRANDLIST_VIEWRow(ByVal row As PRODBRANDLIST_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODBRANDLIST_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CertificateDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnEXTENSION_EN As Global.System.Data.DataColumn
        
        Private columnFAMILY_I As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Certificate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTENSION_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FAMILY_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILY_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CertificateRow
            Get
                Return CType(Me.Rows(index),CertificateRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CertificateRowChanging As CertificateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CertificateRowChanged As CertificateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CertificateRowDeleting As CertificateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CertificateRowDeleted As CertificateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCertificateRow(ByVal row As CertificateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCertificateRow(ByVal CERTIFICATENUMBER As String, ByVal EXTENSION_EN As String, ByVal FAMILY_I As String) As CertificateRow
            Dim rowCertificateRow As CertificateRow = CType(Me.NewRow,CertificateRow)
            Dim columnValuesArray() As Object = New Object() {CERTIFICATENUMBER, EXTENSION_EN, FAMILY_I}
            rowCertificateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCertificateRow)
            Return rowCertificateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCERTIFICATENUMBER(ByVal CERTIFICATENUMBER As String) As CertificateRow
            Return CType(Me.Rows.Find(New Object() {CERTIFICATENUMBER}),CertificateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CertificateDataTable = CType(MyBase.Clone,CertificateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CertificateDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnEXTENSION_EN = MyBase.Columns("EXTENSION_EN")
            Me.columnFAMILY_I = MyBase.Columns("FAMILY_I")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnEXTENSION_EN = New Global.System.Data.DataColumn("EXTENSION_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION_EN)
            Me.columnFAMILY_I = New Global.System.Data.DataColumn("FAMILY_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILY_I)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCERTIFICATENUMBER}, true))
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.Unique = true
            Me.columnFAMILY_I.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCertificateRow() As CertificateRow
            Return CType(Me.NewRow,CertificateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CertificateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CertificateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CertificateRowChangedEvent) Is Nothing) Then
                RaiseEvent CertificateRowChanged(Me, New CertificateRowChangeEvent(CType(e.Row,CertificateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CertificateRowChangingEvent) Is Nothing) Then
                RaiseEvent CertificateRowChanging(Me, New CertificateRowChangeEvent(CType(e.Row,CertificateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CertificateRowDeletedEvent) Is Nothing) Then
                RaiseEvent CertificateRowDeleted(Me, New CertificateRowChangeEvent(CType(e.Row,CertificateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CertificateRowDeletingEvent) Is Nothing) Then
                RaiseEvent CertificateRowDeleting(Me, New CertificateRowChangeEvent(CType(e.Row,CertificateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCertificateRow(ByVal row As CertificateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ImarkPassengerDataSet = New ImarkPassengerDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CertificateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BRAND_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableBRAND_VIEW As BRAND_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBRAND_VIEW = CType(Me.Table,BRAND_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BRANDCODE() As String
            Get
                Return CType(Me(Me.tableBRAND_VIEW.BRANDCODEColumn),String)
            End Get
            Set
                Me(Me.tableBRAND_VIEW.BRANDCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BRANDNAME() As String
            Get
                Return CType(Me(Me.tableBRAND_VIEW.BRANDNAMEColumn),String)
            End Get
            Set
                Me(Me.tableBRAND_VIEW.BRANDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tableBRAND_VIEW.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tableBRAND_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificateRow() As CertificateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificate_BRAND_VIEW")),CertificateRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificate_BRAND_VIEW"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DEFAULTVALUES_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableDEFAULTVALUES_VIEW As DEFAULTVALUES_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEFAULTVALUES_VIEW = CType(Me.Table,DEFAULTVALUES_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.CERTIFICATENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CERTIFICATENUMBER' in table 'DEFAULTVALUES_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLIERNAME_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.SUPPLIERNAME_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIERNAME_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.SUPPLIERNAME_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COMPLETEADDRESS_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.COMPLETEADDRESS_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMPLETEADDRESS_I' in table 'DEFAULTVALUES_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.COMPLETEADDRESS_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COUNTRYOFORIGIN_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.COUNTRYOFORIGIN_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRYOFORIGIN_I' in table 'DEFAULTVALUES_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.COUNTRYOFORIGIN_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TELEPHONE_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.TELEPHONE_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TELEPHONE_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.TELEPHONE_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FAX_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.FAX_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.FAX_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MANUFACTURERNAME_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.MANUFACTURERNAME_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MANUFACTURERNAME_I' in table 'DEFAULTVALUES_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.MANUFACTURERNAME_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TECHNICALDEVELOPMENTCENTER_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.TECHNICALDEVELOPMENTCENTER_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TECHNICALDEVELOPMENTCENTER_I' in table 'DEFAULTVALUES_VIEW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.TECHNICALDEVELOPMENTCENTER_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property APPLICANTNAME_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTNAME_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APPLICANTNAME_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTNAME_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property APPLICANTTITLE_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTTITLE_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APPLICANTTITLE_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTTITLE_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ASSOCIATEDPLANT_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.ASSOCIATEDPLANT_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSOCIATEDPLANT_I' in table 'DEFAULTVALUES_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.ASSOCIATEDPLANT_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHERASPECTS_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEFAULTVALUES_VIEW.OTHERASPECTS_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTHERASPECTS_I' in table 'DEFAULTVALUES_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEFAULTVALUES_VIEW.OTHERASPECTS_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificateRow() As CertificateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificate_DEFAULTVALUES_VIEW")),CertificateRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificate_DEFAULTVALUES_VIEW"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCERTIFICATENUMBERNull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.CERTIFICATENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCERTIFICATENUMBERNull()
            Me(Me.tableDEFAULTVALUES_VIEW.CERTIFICATENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUPPLIERNAME_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.SUPPLIERNAME_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUPPLIERNAME_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.SUPPLIERNAME_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOMPLETEADDRESS_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.COMPLETEADDRESS_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOMPLETEADDRESS_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.COMPLETEADDRESS_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOUNTRYOFORIGIN_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.COUNTRYOFORIGIN_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOUNTRYOFORIGIN_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.COUNTRYOFORIGIN_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTELEPHONE_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.TELEPHONE_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTELEPHONE_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.TELEPHONE_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFAX_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.FAX_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFAX_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.FAX_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMANUFACTURERNAME_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.MANUFACTURERNAME_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMANUFACTURERNAME_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.MANUFACTURERNAME_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTECHNICALDEVELOPMENTCENTER_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.TECHNICALDEVELOPMENTCENTER_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTECHNICALDEVELOPMENTCENTER_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.TECHNICALDEVELOPMENTCENTER_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAPPLICANTNAME_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.APPLICANTNAME_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAPPLICANTNAME_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTNAME_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAPPLICANTTITLE_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.APPLICANTTITLE_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAPPLICANTTITLE_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.APPLICANTTITLE_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsASSOCIATEDPLANT_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.ASSOCIATEDPLANT_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetASSOCIATEDPLANT_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.ASSOCIATEDPLANT_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOTHERASPECTS_INull() As Boolean
            Return Me.IsNull(Me.tableDEFAULTVALUES_VIEW.OTHERASPECTS_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOTHERASPECTS_INull()
            Me(Me.tableDEFAULTVALUES_VIEW.OTHERASPECTS_IColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PRODUCTDATA_REPORT_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTDATA_REPORT_VIEW As PRODUCTDATA_REPORT_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTDATA_REPORT_VIEW = CType(Me.Table,PRODUCTDATA_REPORT_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SKUID() As Decimal
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SKU() As String
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BRANDCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANDCODE' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIRETYPEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIRETYPEID' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NPRID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NPRID' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SIZESTAMP() As String
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SIZESTAMPColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SIZESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DISCONTINUEDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCONTINUEDDATE' in table 'PRODUCTDATA_REPORT_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPECNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECNUMBER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPEEDRATING() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPEEDRATING' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SINGLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SINGLOADINDEX' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DUALLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUALLOADINDEX' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BELTEDRADIALYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BELTEDRADIALYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TUBELESSYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TUBELESSYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REINFORCEDYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REINFORCEDYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTRALOADYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTRALOADYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEASURINGRIM() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEASURINGRIM' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UTQGTREADWEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTREADWEAR' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UTQGTRACTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTRACTION' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UTQGTEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTEMP' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MUDSNOWYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MUDSNOWYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RIMDIAMETER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIMDIAMETER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIALDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SERIALDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIALDATE' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SERIALDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BRANDDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANDDESC' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOADRANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.LOADRANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOADRANGE' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.LOADRANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEARIMWIDTH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEARIMWIDTHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEARIMWIDTH' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEARIMWIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REGROOVABLEIND() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.REGROOVABLEINDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REGROOVABLEIND' in table 'PRODUCTDATA_REPORT_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.REGROOVABLEINDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLANTPRODUCED() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.PLANTPRODUCEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLANTPRODUCED' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.PLANTPRODUCEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MOSTRECENTTESTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MOSTRECENTTESTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MOSTRECENTTESTDATE' in table 'PRODUCTDATA_REPORT_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MOSTRECENTTESTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IMARK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.IMARKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMARK' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.IMARKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INFORMENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.INFORMENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INFORMENUMBER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.INFORMENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHADATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.FECHADATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHADATE' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.FECHADATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TREADPATTERN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADPATTERNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TREADPATTERN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADPATTERNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPECIALPROTECTIVEBAND() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECIALPROTECTIVEBANDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIALPROTECTIVEBAND' in table 'PRODUCTDATA_REPORT_VIEW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECIALPROTECTIVEBANDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMINALTIREWIDTH() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.NOMINALTIREWIDTHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMINALTIREWIDTH' in table 'PRODUCTDATA_REPORT_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.NOMINALTIREWIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ASPECTRADIO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.ASPECTRADIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASPECTRADIO' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.ASPECTRADIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TREADWEARINDICATORS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADWEARINDICATORSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TREADWEARINDICATORS' in table 'PRODUCTDATA_REPORT_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADWEARINDICATORSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NAMEOFMANUFACTURER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.NAMEOFMANUFACTURERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAMEOFMANUFACTURER' in table 'PRODUCTDATA_REPORT_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.NAMEOFMANUFACTURERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.FAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILY' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.FAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DOTSERIALNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.DOTSERIALNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOTSERIALNUMBER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.DOTSERIALNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLEMENTALEXTENSION_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SUPPLEMENTALEXTENSION_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLEMENTALEXTENSION_EN' in table 'PRODUCTDATA_REPORT_VIEW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SUPPLEMENTALEXTENSION_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTENSION_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION_EN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificateRow() As CertificateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificate_PRODUCTDATA_REPORT_VIEW")),CertificateRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificate_PRODUCTDATA_REPORT_VIEW"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBRANDCODENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBRANDCODENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIRETYPEIDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIRETYPEIDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNPRIDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNPRIDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDISCONTINUEDDATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDISCONTINUEDDATENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSPECNUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSPECNUMBERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSPEEDRATINGNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSPEEDRATINGNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSINGLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSINGLOADINDEXNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDUALLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDUALLOADINDEXNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBELTEDRADIALYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBELTEDRADIALYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTUBELESSYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTUBELESSYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREINFORCEDYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREINFORCEDYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTRALOADYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTRALOADYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEASURINGRIMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEASURINGRIMNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUTQGTREADWEARNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUTQGTREADWEARNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUTQGTRACTIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUTQGTRACTIONNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUTQGTEMPNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUTQGTEMPNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMUDSNOWYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMUDSNOWYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRIMDIAMETERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRIMDIAMETERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIALDATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SERIALDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIALDATENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SERIALDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBRANDDESCNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBRANDDESCNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOADRANGENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.LOADRANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOADRANGENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.LOADRANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEARIMWIDTHNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MEARIMWIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEARIMWIDTHNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEARIMWIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREGROOVABLEINDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.REGROOVABLEINDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREGROOVABLEINDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.REGROOVABLEINDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLANTPRODUCEDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.PLANTPRODUCEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLANTPRODUCEDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.PLANTPRODUCEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMOSTRECENTTESTDATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MOSTRECENTTESTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMOSTRECENTTESTDATENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MOSTRECENTTESTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIMARKNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.IMARKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIMARKNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.IMARKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsINFORMENUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.INFORMENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetINFORMENUMBERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.INFORMENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFECHADATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.FECHADATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFECHADATENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.FECHADATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTREADPATTERNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TREADPATTERNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTREADPATTERNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADPATTERNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSPECIALPROTECTIVEBANDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SPECIALPROTECTIVEBANDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSPECIALPROTECTIVEBANDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECIALPROTECTIVEBANDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOMINALTIREWIDTHNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.NOMINALTIREWIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOMINALTIREWIDTHNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.NOMINALTIREWIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsASPECTRADIONull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.ASPECTRADIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetASPECTRADIONull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.ASPECTRADIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTREADWEARINDICATORSNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TREADWEARINDICATORSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTREADWEARINDICATORSNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TREADWEARINDICATORSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNAMEOFMANUFACTURERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.NAMEOFMANUFACTURERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNAMEOFMANUFACTURERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.NAMEOFMANUFACTURERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFAMILYNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.FAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFAMILYNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.FAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDOTSERIALNUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.DOTSERIALNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDOTSERIALNUMBERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.DOTSERIALNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUPPLEMENTALEXTENSION_ENNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SUPPLEMENTALEXTENSION_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUPPLEMENTALEXTENSION_ENNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SUPPLEMENTALEXTENSION_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTENSION_ENNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTENSION_ENNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PRODBRANDLIST_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODBRANDLIST_VIEW As PRODBRANDLIST_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODBRANDLIST_VIEW = CType(Me.Table,PRODBRANDLIST_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SIZESTAMP() As String
            Get
                Return CType(Me(Me.tablePRODBRANDLIST_VIEW.SIZESTAMPColumn),String)
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.SIZESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BRANDDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODBRANDLIST_VIEW.BRANDDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANDDESC' in table 'PRODBRANDLIST_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.BRANDDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPEEDRATING() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODBRANDLIST_VIEW.SPEEDRATINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPEEDRATING' in table 'PRODBRANDLIST_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.SPEEDRATINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SINGLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODBRANDLIST_VIEW.SINGLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SINGLOADINDEX' in table 'PRODBRANDLIST_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.SINGLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DUALLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODBRANDLIST_VIEW.DUALLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUALLOADINDEX' in table 'PRODBRANDLIST_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.DUALLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tablePRODBRANDLIST_VIEW.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATIONTYPEID() As Decimal
            Get
                Return CType(Me(Me.tablePRODBRANDLIST_VIEW.CERTIFICATIONTYPEIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODBRANDLIST_VIEW.CERTIFICATIONTYPEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificateRow() As CertificateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificate_PRODBRANDLIST_VIEW")),CertificateRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificate_PRODBRANDLIST_VIEW"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBRANDDESCNull() As Boolean
            Return Me.IsNull(Me.tablePRODBRANDLIST_VIEW.BRANDDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBRANDDESCNull()
            Me(Me.tablePRODBRANDLIST_VIEW.BRANDDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSPEEDRATINGNull() As Boolean
            Return Me.IsNull(Me.tablePRODBRANDLIST_VIEW.SPEEDRATINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSPEEDRATINGNull()
            Me(Me.tablePRODBRANDLIST_VIEW.SPEEDRATINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSINGLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODBRANDLIST_VIEW.SINGLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSINGLOADINDEXNull()
            Me(Me.tablePRODBRANDLIST_VIEW.SINGLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDUALLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODBRANDLIST_VIEW.DUALLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDUALLOADINDEXNull()
            Me(Me.tablePRODBRANDLIST_VIEW.DUALLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CertificateRow
        Inherits Global.System.Data.DataRow
        
        Private tableCertificate As CertificateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCertificate = CType(Me.Table,CertificateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tableCertificate.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tableCertificate.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTENSION_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificate.EXTENSION_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION_EN' in table 'Certificate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificate.EXTENSION_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FAMILY_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificate.FAMILY_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILY_I' in table 'Certificate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificate.FAMILY_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTENSION_ENNull() As Boolean
            Return Me.IsNull(Me.tableCertificate.EXTENSION_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTENSION_ENNull()
            Me(Me.tableCertificate.EXTENSION_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFAMILY_INull() As Boolean
            Return Me.IsNull(Me.tableCertificate.FAMILY_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFAMILY_INull()
            Me(Me.tableCertificate.FAMILY_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetBRAND_VIEWRows() As BRAND_VIEWRow()
            If (Me.Table.ChildRelations("Certificate_BRAND_VIEW") Is Nothing) Then
                Return New BRAND_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificate_BRAND_VIEW")),BRAND_VIEWRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetDEFAULTVALUES_VIEWRows() As DEFAULTVALUES_VIEWRow()
            If (Me.Table.ChildRelations("Certificate_DEFAULTVALUES_VIEW") Is Nothing) Then
                Return New DEFAULTVALUES_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificate_DEFAULTVALUES_VIEW")),DEFAULTVALUES_VIEWRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPRODUCTDATA_REPORT_VIEWRows() As PRODUCTDATA_REPORT_VIEWRow()
            If (Me.Table.ChildRelations("Certificate_PRODUCTDATA_REPORT_VIEW") Is Nothing) Then
                Return New PRODUCTDATA_REPORT_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificate_PRODUCTDATA_REPORT_VIEW")),PRODUCTDATA_REPORT_VIEWRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPRODBRANDLIST_VIEWRows() As PRODBRANDLIST_VIEWRow()
            If (Me.Table.ChildRelations("Certificate_PRODBRANDLIST_VIEW") Is Nothing) Then
                Return New PRODBRANDLIST_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificate_PRODBRANDLIST_VIEW")),PRODBRANDLIST_VIEWRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BRAND_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BRAND_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BRAND_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BRAND_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DEFAULTVALUES_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DEFAULTVALUES_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DEFAULTVALUES_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DEFAULTVALUES_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PRODUCTDATA_REPORT_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTDATA_REPORT_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PRODUCTDATA_REPORT_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PRODUCTDATA_REPORT_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PRODBRANDLIST_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODBRANDLIST_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PRODBRANDLIST_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PRODBRANDLIST_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CertificateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CertificateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CertificateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CertificateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ImarkPassengerDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BRAND_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BRAND_VIEW"
            tableMapping.ColumnMappings.Add("BRANDCODE", "BRANDCODE")
            tableMapping.ColumnMappings.Add("BRANDNAME", "BRANDNAME")
            tableMapping.ColumnMappings.Add("CERTIFICATENUMBER", "CERTIFICATENUMBER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection()
            Me._connection.ConnectionString = Global.CooperTire.ICS.Datasets.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BRANDCODE, BRANDNAME, CERTIFICATENUMBER FROM ICS.BRAND_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImarkPassengerDataSet.BRAND_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImarkPassengerDataSet.BRAND_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImarkPassengerDataSet.BRAND_VIEWDataTable = New ImarkPassengerDataSet.BRAND_VIEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DEFAULTVALUES_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DEFAULTVALUES_VIEW"
            tableMapping.ColumnMappings.Add("CERTIFICATENUMBER", "CERTIFICATENUMBER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection()
            Me._connection.ConnectionString = Global.CooperTire.ICS.Datasets.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CERTIFICATENUMBER FROM DEFAULTVALUES_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImarkPassengerDataSet.DEFAULTVALUES_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImarkPassengerDataSet.DEFAULTVALUES_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImarkPassengerDataSet.DEFAULTVALUES_VIEWDataTable = New ImarkPassengerDataSet.DEFAULTVALUES_VIEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODUCTDATA_REPORT_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODUCTDATA_REPORT_VIEW"
            tableMapping.ColumnMappings.Add("SKUID", "SKUID")
            tableMapping.ColumnMappings.Add("SKU", "SKU")
            tableMapping.ColumnMappings.Add("BRANDCODE", "BRANDCODE")
            tableMapping.ColumnMappings.Add("TIRETYPEID", "TIRETYPEID")
            tableMapping.ColumnMappings.Add("NPRID", "NPRID")
            tableMapping.ColumnMappings.Add("SIZESTAMP", "SIZESTAMP")
            tableMapping.ColumnMappings.Add("DISCONTINUEDDATE", "DISCONTINUEDDATE")
            tableMapping.ColumnMappings.Add("SPECNUMBER", "SPECNUMBER")
            tableMapping.ColumnMappings.Add("SPEEDRATING", "SPEEDRATING")
            tableMapping.ColumnMappings.Add("SINGLOADINDEX", "SINGLOADINDEX")
            tableMapping.ColumnMappings.Add("DUALLOADINDEX", "DUALLOADINDEX")
            tableMapping.ColumnMappings.Add("BELTEDRADIALYN", "BELTEDRADIALYN")
            tableMapping.ColumnMappings.Add("TUBELESSYN", "TUBELESSYN")
            tableMapping.ColumnMappings.Add("REINFORCEDYN", "REINFORCEDYN")
            tableMapping.ColumnMappings.Add("EXTRALOADYN", "EXTRALOADYN")
            tableMapping.ColumnMappings.Add("MEASURINGRIM", "MEASURINGRIM")
            tableMapping.ColumnMappings.Add("UTQGTREADWEAR", "UTQGTREADWEAR")
            tableMapping.ColumnMappings.Add("UTQGTRACTION", "UTQGTRACTION")
            tableMapping.ColumnMappings.Add("UTQGTEMP", "UTQGTEMP")
            tableMapping.ColumnMappings.Add("MUDSNOWYN", "MUDSNOWYN")
            tableMapping.ColumnMappings.Add("RIMDIAMETER", "RIMDIAMETER")
            tableMapping.ColumnMappings.Add("SERIALDATE", "SERIALDATE")
            tableMapping.ColumnMappings.Add("BRANDDESC", "BRANDDESC")
            tableMapping.ColumnMappings.Add("LOADRANGE", "LOADRANGE")
            tableMapping.ColumnMappings.Add("MEARIMWIDTH", "MEARIMWIDTH")
            tableMapping.ColumnMappings.Add("REGROOVABLEIND", "REGROOVABLEIND")
            tableMapping.ColumnMappings.Add("PLANTPRODUCED", "PLANTPRODUCED")
            tableMapping.ColumnMappings.Add("MOSTRECENTTESTDATE", "MOSTRECENTTESTDATE")
            tableMapping.ColumnMappings.Add("IMARK", "IMARK")
            tableMapping.ColumnMappings.Add("INFORMENUMBER", "INFORMENUMBER")
            tableMapping.ColumnMappings.Add("FECHADATE", "FECHADATE")
            tableMapping.ColumnMappings.Add("TREADPATTERN", "TREADPATTERN")
            tableMapping.ColumnMappings.Add("SPECIALPROTECTIVEBAND", "SPECIALPROTECTIVEBAND")
            tableMapping.ColumnMappings.Add("NOMINALTIREWIDTH", "NOMINALTIREWIDTH")
            tableMapping.ColumnMappings.Add("ASPECTRADIO", "ASPECTRADIO")
            tableMapping.ColumnMappings.Add("TREADWEARINDICATORS", "TREADWEARINDICATORS")
            tableMapping.ColumnMappings.Add("NAMEOFMANUFACTURER", "NAMEOFMANUFACTURER")
            tableMapping.ColumnMappings.Add("FAMILY", "FAMILY")
            tableMapping.ColumnMappings.Add("DOTSERIALNUMBER", "DOTSERIALNUMBER")
            tableMapping.ColumnMappings.Add("CERTIFICATENUMBER", "CERTIFICATENUMBER")
            tableMapping.ColumnMappings.Add("SUPPLEMENTALEXTENSION_EN", "SUPPLEMENTALEXTENSION_EN")
            tableMapping.ColumnMappings.Add("EXTENSION_EN", "EXTENSION_EN")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection()
            Me._connection.ConnectionString = Global.CooperTire.ICS.Datasets.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SKUID, SKU, BRANDCODE, TIRETYPEID, NPRID, SIZESTAMP, DISCONTINUEDDATE, SPE"& _ 
                "CNUMBER, SPEEDRATING, SINGLOADINDEX, DUALLOADINDEX, BELTEDRADIALYN, TUBELESSYN, "& _ 
                "REINFORCEDYN, EXTRALOADYN, MEASURINGRIM, UTQGTREADWEAR, UTQGTRACTION, UTQGTEMP, "& _ 
                "MUDSNOWYN, RIMDIAMETER, SERIALDATE, BRANDDESC, LOADRANGE, MEARIMWIDTH, REGROOVAB"& _ 
                "LEIND, PLANTPRODUCED, MOSTRECENTTESTDATE, IMARK, INFORMENUMBER, FECHADATE, TREAD"& _ 
                "PATTERN, SPECIALPROTECTIVEBAND, NOMINALTIREWIDTH, ASPECTRADIO, TREADWEARINDICATO"& _ 
                "RS, NAMEOFMANUFACTURER, FAMILY, DOTSERIALNUMBER, CERTIFICATENUMBER, SUPPLEMENTAL"& _ 
                "EXTENSION_EN, EXTENSION_EN FROM ICS.PRODUCTDATA_REPORT_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImarkPassengerDataSet.PRODUCTDATA_REPORT_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImarkPassengerDataSet.PRODUCTDATA_REPORT_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImarkPassengerDataSet.PRODUCTDATA_REPORT_VIEWDataTable = New ImarkPassengerDataSet.PRODUCTDATA_REPORT_VIEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODBRANDLIST_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODBRANDLIST_VIEW"
            tableMapping.ColumnMappings.Add("SIZESTAMP", "SIZESTAMP")
            tableMapping.ColumnMappings.Add("BRANDDESC", "BRANDDESC")
            tableMapping.ColumnMappings.Add("SPEEDRATING", "SPEEDRATING")
            tableMapping.ColumnMappings.Add("SINGLOADINDEX", "SINGLOADINDEX")
            tableMapping.ColumnMappings.Add("DUALLOADINDEX", "DUALLOADINDEX")
            tableMapping.ColumnMappings.Add("CERTIFICATENUMBER", "CERTIFICATENUMBER")
            tableMapping.ColumnMappings.Add("CERTIFICATIONTYPEID", "CERTIFICATIONTYPEID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection()
            Me._connection.ConnectionString = Global.CooperTire.ICS.Datasets.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SIZESTAMP, BRANDDESC, SPEEDRATING, SINGLOADINDEX, DUALLOADINDEX, CERTIFICA"& _ 
                "TENUMBER, CERTIFICATIONTYPEID FROM ICS.PRODBRANDLIST_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ImarkPassengerDataSet.PRODBRANDLIST_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ImarkPassengerDataSet.PRODBRANDLIST_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ImarkPassengerDataSet.PRODBRANDLIST_VIEWDataTable = New ImarkPassengerDataSet.PRODBRANDLIST_VIEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
