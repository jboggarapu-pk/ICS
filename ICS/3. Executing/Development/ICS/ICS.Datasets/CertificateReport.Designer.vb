'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3634
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CertificateReport"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CertificateReport
    Inherits Global.System.Data.DataSet
    
    Private tablePRODUCTDATA_REPORT_VIEW As PRODUCTDATA_REPORT_VIEWDataTable
    
    Private tableCERTIFICATE_VIEW As CERTIFICATE_VIEWDataTable
    
    Private tableTESTREFERENCE_VIEW As TESTREFERENCE_VIEWDataTable
    
    Private relationPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW As Global.System.Data.DataRelation
    
    Private relationCERTIFICATE_VIEW_TESTREFERENCE_VIEW As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PRODUCTDATA_REPORT_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTDATA_REPORT_VIEWDataTable(ds.Tables("PRODUCTDATA_REPORT_VIEW")))
            End If
            If (Not (ds.Tables("CERTIFICATE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New CERTIFICATE_VIEWDataTable(ds.Tables("CERTIFICATE_VIEW")))
            End If
            If (Not (ds.Tables("TESTREFERENCE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New TESTREFERENCE_VIEWDataTable(ds.Tables("TESTREFERENCE_VIEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTDATA_REPORT_VIEW() As PRODUCTDATA_REPORT_VIEWDataTable
        Get
            Return Me.tablePRODUCTDATA_REPORT_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CERTIFICATE_VIEW() As CERTIFICATE_VIEWDataTable
        Get
            Return Me.tableCERTIFICATE_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TESTREFERENCE_VIEW() As TESTREFERENCE_VIEWDataTable
        Get
            Return Me.tableTESTREFERENCE_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CertificateReport = CType(MyBase.Clone,CertificateReport)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PRODUCTDATA_REPORT_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTDATA_REPORT_VIEWDataTable(ds.Tables("PRODUCTDATA_REPORT_VIEW")))
            End If
            If (Not (ds.Tables("CERTIFICATE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New CERTIFICATE_VIEWDataTable(ds.Tables("CERTIFICATE_VIEW")))
            End If
            If (Not (ds.Tables("TESTREFERENCE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New TESTREFERENCE_VIEWDataTable(ds.Tables("TESTREFERENCE_VIEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePRODUCTDATA_REPORT_VIEW = CType(MyBase.Tables("PRODUCTDATA_REPORT_VIEW"),PRODUCTDATA_REPORT_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTDATA_REPORT_VIEW) Is Nothing) Then
                Me.tablePRODUCTDATA_REPORT_VIEW.InitVars
            End If
        End If
        Me.tableCERTIFICATE_VIEW = CType(MyBase.Tables("CERTIFICATE_VIEW"),CERTIFICATE_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCERTIFICATE_VIEW) Is Nothing) Then
                Me.tableCERTIFICATE_VIEW.InitVars
            End If
        End If
        Me.tableTESTREFERENCE_VIEW = CType(MyBase.Tables("TESTREFERENCE_VIEW"),TESTREFERENCE_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTESTREFERENCE_VIEW) Is Nothing) Then
                Me.tableTESTREFERENCE_VIEW.InitVars
            End If
        End If
        Me.relationPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW = Me.Relations("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW")
        Me.relationCERTIFICATE_VIEW_TESTREFERENCE_VIEW = Me.Relations("CERTIFICATE_VIEW_TESTREFERENCE_VIEW")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CertificateReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CertificateReport.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePRODUCTDATA_REPORT_VIEW = New PRODUCTDATA_REPORT_VIEWDataTable
        MyBase.Tables.Add(Me.tablePRODUCTDATA_REPORT_VIEW)
        Me.tableCERTIFICATE_VIEW = New CERTIFICATE_VIEWDataTable
        MyBase.Tables.Add(Me.tableCERTIFICATE_VIEW)
        Me.tableTESTREFERENCE_VIEW = New TESTREFERENCE_VIEWDataTable
        MyBase.Tables.Add(Me.tableTESTREFERENCE_VIEW)
        Me.relationPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW = New Global.System.Data.DataRelation("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW", New Global.System.Data.DataColumn() {Me.tablePRODUCTDATA_REPORT_VIEW.SKUIDColumn}, New Global.System.Data.DataColumn() {Me.tableCERTIFICATE_VIEW.SKUIDColumn}, false)
        Me.Relations.Add(Me.relationPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW)
        Me.relationCERTIFICATE_VIEW_TESTREFERENCE_VIEW = New Global.System.Data.DataRelation("CERTIFICATE_VIEW_TESTREFERENCE_VIEW", New Global.System.Data.DataColumn() {Me.tableCERTIFICATE_VIEW.SKUIDColumn, Me.tableCERTIFICATE_VIEW.CERTIFICATENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableTESTREFERENCE_VIEW.SKUIDColumn, Me.tableTESTREFERENCE_VIEW.CERTIFICATENUMBERColumn}, false)
        Me.Relations.Add(Me.relationCERTIFICATE_VIEW_TESTREFERENCE_VIEW)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRODUCTDATA_REPORT_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCERTIFICATE_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTESTREFERENCE_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CertificateReport = New CertificateReport
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PRODUCTDATA_REPORT_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTDATA_REPORT_VIEWRowChangeEvent)
    
    Public Delegate Sub CERTIFICATE_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As CERTIFICATE_VIEWRowChangeEvent)
    
    Public Delegate Sub TESTREFERENCE_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As TESTREFERENCE_VIEWRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTDATA_REPORT_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSKUID As Global.System.Data.DataColumn
        
        Private columnSKU As Global.System.Data.DataColumn
        
        Private columnBRANDCODE As Global.System.Data.DataColumn
        
        Private columnTIRETYPEID As Global.System.Data.DataColumn
        
        Private columnNPRID As Global.System.Data.DataColumn
        
        Private columnSIZESTAMP As Global.System.Data.DataColumn
        
        Private columnDISCONTINUEDDATE As Global.System.Data.DataColumn
        
        Private columnSPECNUMBER As Global.System.Data.DataColumn
        
        Private columnSPEEDRATING As Global.System.Data.DataColumn
        
        Private columnSINGLOADINDEX As Global.System.Data.DataColumn
        
        Private columnDUALLOADINDEX As Global.System.Data.DataColumn
        
        Private columnBELTEDRADIALYN As Global.System.Data.DataColumn
        
        Private columnTUBELESSYN As Global.System.Data.DataColumn
        
        Private columnREINFORCEDYN As Global.System.Data.DataColumn
        
        Private columnEXTRALOADYN As Global.System.Data.DataColumn
        
        Private columnMEASURINGRIM As Global.System.Data.DataColumn
        
        Private columnUTQGTREADWEAR As Global.System.Data.DataColumn
        
        Private columnUTQGTRACTION As Global.System.Data.DataColumn
        
        Private columnUTQGTEMP As Global.System.Data.DataColumn
        
        Private columnMUDSNOWYN As Global.System.Data.DataColumn
        
        Private columnRIMDIAMETER As Global.System.Data.DataColumn
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnEXTENSION_EN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTDATA_REPORT_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BRANDCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBRANDCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIRETYPEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIRETYPEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NPRIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNPRID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIZESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIZESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCONTINUEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCONTINUEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPECNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPEEDRATINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPEEDRATING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SINGLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSINGLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUALLOADINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUALLOADINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BELTEDRADIALYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBELTEDRADIALYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TUBELESSYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTUBELESSYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REINFORCEDYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREINFORCEDYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTRALOADYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTRALOADYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEASURINGRIMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEASURINGRIM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UTQGTREADWEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTREADWEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UTQGTRACTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTRACTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UTQGTEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTQGTEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUDSNOWYNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUDSNOWYN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIMDIAMETERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIMDIAMETER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTENSION_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTDATA_REPORT_VIEWRow
            Get
                Return CType(Me.Rows(index),PRODUCTDATA_REPORT_VIEWRow)
            End Get
        End Property
        
        Public Event PRODUCTDATA_REPORT_VIEWRowChanging As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        Public Event PRODUCTDATA_REPORT_VIEWRowChanged As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        Public Event PRODUCTDATA_REPORT_VIEWRowDeleting As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        Public Event PRODUCTDATA_REPORT_VIEWRowDeleted As PRODUCTDATA_REPORT_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRODUCTDATA_REPORT_VIEWRow(ByVal row As PRODUCTDATA_REPORT_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRODUCTDATA_REPORT_VIEWRow( _
                    ByVal SKUID As Decimal,  _
                    ByVal SKU As String,  _
                    ByVal BRANDCODE As String,  _
                    ByVal TIRETYPEID As Decimal,  _
                    ByVal NPRID As Decimal,  _
                    ByVal SIZESTAMP As String,  _
                    ByVal DISCONTINUEDDATE As Date,  _
                    ByVal SPECNUMBER As String,  _
                    ByVal SPEEDRATING As String,  _
                    ByVal SINGLOADINDEX As String,  _
                    ByVal DUALLOADINDEX As String,  _
                    ByVal BELTEDRADIALYN As String,  _
                    ByVal TUBELESSYN As String,  _
                    ByVal REINFORCEDYN As String,  _
                    ByVal EXTRALOADYN As String,  _
                    ByVal MEASURINGRIM As String,  _
                    ByVal UTQGTREADWEAR As String,  _
                    ByVal UTQGTRACTION As String,  _
                    ByVal UTQGTEMP As String,  _
                    ByVal MUDSNOWYN As String,  _
                    ByVal RIMDIAMETER As Decimal,  _
                    ByVal CERTIFICATENUMBER As String,  _
                    ByVal EXTENSION_EN As String) As PRODUCTDATA_REPORT_VIEWRow
            Dim rowPRODUCTDATA_REPORT_VIEWRow As PRODUCTDATA_REPORT_VIEWRow = CType(Me.NewRow,PRODUCTDATA_REPORT_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {SKUID, SKU, BRANDCODE, TIRETYPEID, NPRID, SIZESTAMP, DISCONTINUEDDATE, SPECNUMBER, SPEEDRATING, SINGLOADINDEX, DUALLOADINDEX, BELTEDRADIALYN, TUBELESSYN, REINFORCEDYN, EXTRALOADYN, MEASURINGRIM, UTQGTREADWEAR, UTQGTRACTION, UTQGTEMP, MUDSNOWYN, RIMDIAMETER, CERTIFICATENUMBER, EXTENSION_EN}
            rowPRODUCTDATA_REPORT_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTDATA_REPORT_VIEWRow)
            Return rowPRODUCTDATA_REPORT_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTDATA_REPORT_VIEWDataTable = CType(MyBase.Clone,PRODUCTDATA_REPORT_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTDATA_REPORT_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSKUID = MyBase.Columns("SKUID")
            Me.columnSKU = MyBase.Columns("SKU")
            Me.columnBRANDCODE = MyBase.Columns("BRANDCODE")
            Me.columnTIRETYPEID = MyBase.Columns("TIRETYPEID")
            Me.columnNPRID = MyBase.Columns("NPRID")
            Me.columnSIZESTAMP = MyBase.Columns("SIZESTAMP")
            Me.columnDISCONTINUEDDATE = MyBase.Columns("DISCONTINUEDDATE")
            Me.columnSPECNUMBER = MyBase.Columns("SPECNUMBER")
            Me.columnSPEEDRATING = MyBase.Columns("SPEEDRATING")
            Me.columnSINGLOADINDEX = MyBase.Columns("SINGLOADINDEX")
            Me.columnDUALLOADINDEX = MyBase.Columns("DUALLOADINDEX")
            Me.columnBELTEDRADIALYN = MyBase.Columns("BELTEDRADIALYN")
            Me.columnTUBELESSYN = MyBase.Columns("TUBELESSYN")
            Me.columnREINFORCEDYN = MyBase.Columns("REINFORCEDYN")
            Me.columnEXTRALOADYN = MyBase.Columns("EXTRALOADYN")
            Me.columnMEASURINGRIM = MyBase.Columns("MEASURINGRIM")
            Me.columnUTQGTREADWEAR = MyBase.Columns("UTQGTREADWEAR")
            Me.columnUTQGTRACTION = MyBase.Columns("UTQGTRACTION")
            Me.columnUTQGTEMP = MyBase.Columns("UTQGTEMP")
            Me.columnMUDSNOWYN = MyBase.Columns("MUDSNOWYN")
            Me.columnRIMDIAMETER = MyBase.Columns("RIMDIAMETER")
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnEXTENSION_EN = MyBase.Columns("EXTENSION_EN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSKUID = New Global.System.Data.DataColumn("SKUID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKUID)
            Me.columnSKU = New Global.System.Data.DataColumn("SKU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU)
            Me.columnBRANDCODE = New Global.System.Data.DataColumn("BRANDCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBRANDCODE)
            Me.columnTIRETYPEID = New Global.System.Data.DataColumn("TIRETYPEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIRETYPEID)
            Me.columnNPRID = New Global.System.Data.DataColumn("NPRID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNPRID)
            Me.columnSIZESTAMP = New Global.System.Data.DataColumn("SIZESTAMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIZESTAMP)
            Me.columnDISCONTINUEDDATE = New Global.System.Data.DataColumn("DISCONTINUEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCONTINUEDDATE)
            Me.columnSPECNUMBER = New Global.System.Data.DataColumn("SPECNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECNUMBER)
            Me.columnSPEEDRATING = New Global.System.Data.DataColumn("SPEEDRATING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPEEDRATING)
            Me.columnSINGLOADINDEX = New Global.System.Data.DataColumn("SINGLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSINGLOADINDEX)
            Me.columnDUALLOADINDEX = New Global.System.Data.DataColumn("DUALLOADINDEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUALLOADINDEX)
            Me.columnBELTEDRADIALYN = New Global.System.Data.DataColumn("BELTEDRADIALYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBELTEDRADIALYN)
            Me.columnTUBELESSYN = New Global.System.Data.DataColumn("TUBELESSYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTUBELESSYN)
            Me.columnREINFORCEDYN = New Global.System.Data.DataColumn("REINFORCEDYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREINFORCEDYN)
            Me.columnEXTRALOADYN = New Global.System.Data.DataColumn("EXTRALOADYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTRALOADYN)
            Me.columnMEASURINGRIM = New Global.System.Data.DataColumn("MEASURINGRIM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEASURINGRIM)
            Me.columnUTQGTREADWEAR = New Global.System.Data.DataColumn("UTQGTREADWEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTREADWEAR)
            Me.columnUTQGTRACTION = New Global.System.Data.DataColumn("UTQGTRACTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTRACTION)
            Me.columnUTQGTEMP = New Global.System.Data.DataColumn("UTQGTEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTQGTEMP)
            Me.columnMUDSNOWYN = New Global.System.Data.DataColumn("MUDSNOWYN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUDSNOWYN)
            Me.columnRIMDIAMETER = New Global.System.Data.DataColumn("RIMDIAMETER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIMDIAMETER)
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnEXTENSION_EN = New Global.System.Data.DataColumn("EXTENSION_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION_EN)
            Me.columnSKUID.AllowDBNull = false
            Me.columnSKU.AllowDBNull = false
            Me.columnSKU.MaxLength = 30
            Me.columnBRANDCODE.MaxLength = 10
            Me.columnSIZESTAMP.AllowDBNull = false
            Me.columnSIZESTAMP.MaxLength = 20
            Me.columnSPECNUMBER.MaxLength = 30
            Me.columnSPEEDRATING.MaxLength = 40
            Me.columnSINGLOADINDEX.MaxLength = 40
            Me.columnDUALLOADINDEX.MaxLength = 40
            Me.columnBELTEDRADIALYN.MaxLength = 4
            Me.columnTUBELESSYN.MaxLength = 4
            Me.columnREINFORCEDYN.MaxLength = 4
            Me.columnEXTRALOADYN.MaxLength = 4
            Me.columnMEASURINGRIM.MaxLength = 40
            Me.columnUTQGTREADWEAR.MaxLength = 40
            Me.columnUTQGTRACTION.MaxLength = 40
            Me.columnUTQGTEMP.MaxLength = 40
            Me.columnMUDSNOWYN.MaxLength = 4
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnEXTENSION_EN.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRODUCTDATA_REPORT_VIEWRow() As PRODUCTDATA_REPORT_VIEWRow
            Return CType(Me.NewRow,PRODUCTDATA_REPORT_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTDATA_REPORT_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTDATA_REPORT_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowChanged(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowChanging(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowDeleted(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTDATA_REPORT_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTDATA_REPORT_VIEWRowDeleting(Me, New PRODUCTDATA_REPORT_VIEWRowChangeEvent(CType(e.Row,PRODUCTDATA_REPORT_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRODUCTDATA_REPORT_VIEWRow(ByVal row As PRODUCTDATA_REPORT_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CertificateReport = New CertificateReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTDATA_REPORT_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CERTIFICATE_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSKUID As Global.System.Data.DataColumn
        
        Private columnCERTIFICATIONTYPEID As Global.System.Data.DataColumn
        
        Private columnCERTIFICATIONTYPENAME As Global.System.Data.DataColumn
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnDATESUBMITTED As Global.System.Data.DataColumn
        
        Private columnACTIVESTATUS As Global.System.Data.DataColumn
        
        Private columnDATEASSIGNED_EGI As Global.System.Data.DataColumn
        
        Private columnDATEAPPROVED_CEGI As Global.System.Data.DataColumn
        
        Private columnRENEWALREQUIRED_CGIN As Global.System.Data.DataColumn
        
        Private columnSUPPLEMENTALREQUIRED_EI As Global.System.Data.DataColumn
        
        Private columnSUPPLEMENTALNUMBER_EI As Global.System.Data.DataColumn
        
        Private columnJOBREPORTNUMBER_CEN As Global.System.Data.DataColumn
        
        Private columnEXTENSION_EN As Global.System.Data.DataColumn
        
        Private columnSUPPLEMENTALMOLDSTAMPING_E As Global.System.Data.DataColumn
        
        Private columnCERTTYPE As Global.System.Data.DataColumn
        
        Private columnEXPIRYDATE_I As Global.System.Data.DataColumn
        
        Private columnEMARKREFERENCE_I As Global.System.Data.DataColumn
        
        Private columnFAMILY_I As Global.System.Data.DataColumn
        
        Private columnPRODUCTLOCATION_C As Global.System.Data.DataColumn
        
        Private columnCOUNTRYOFMANUFACTURE_N As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_N As Global.System.Data.DataColumn
        
        Private columnCUSTOMERSPECIFIC_N As Global.System.Data.DataColumn
        
        Private columnIMPORTER_N As Global.System.Data.DataColumn
        
        Private columnIMPORTERADDRESS_N As Global.System.Data.DataColumn
        
        Private columnIMPORTERREPRESENTATIVE_N As Global.System.Data.DataColumn
        
        Private columnCOUNTRYLOCATION_N As Global.System.Data.DataColumn
        
        Private columnBATCHNUMBER_G As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CERTIFICATE_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTIFICATIONTYPEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATIONTYPEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTIFICATIONTYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATIONTYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATESUBMITTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATESUBMITTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTIVESTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVESTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEASSIGNED_EGIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEASSIGNED_EGI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEAPPROVED_CEGIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEAPPROVED_CEGI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RENEWALREQUIRED_CGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRENEWALREQUIRED_CGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLEMENTALREQUIRED_EIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLEMENTALREQUIRED_EI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLEMENTALNUMBER_EIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLEMENTALNUMBER_EI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JOBREPORTNUMBER_CENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOBREPORTNUMBER_CEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTENSION_ENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION_EN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLEMENTALMOLDSTAMPING_EColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLEMENTALMOLDSTAMPING_E
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPIRYDATE_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPIRYDATE_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMARKREFERENCE_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMARKREFERENCE_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAMILY_IColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILY_I
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTLOCATION_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTLOCATION_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUNTRYOFMANUFACTURE_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRYOFMANUFACTURE_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMER_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTOMERSPECIFIC_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMERSPECIFIC_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTER_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTER_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTERADDRESS_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTERADDRESS_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTERREPRESENTATIVE_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTERREPRESENTATIVE_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUNTRYLOCATION_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRYLOCATION_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHNUMBER_GColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCHNUMBER_G
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CERTIFICATE_VIEWRow
            Get
                Return CType(Me.Rows(index),CERTIFICATE_VIEWRow)
            End Get
        End Property
        
        Public Event CERTIFICATE_VIEWRowChanging As CERTIFICATE_VIEWRowChangeEventHandler
        
        Public Event CERTIFICATE_VIEWRowChanged As CERTIFICATE_VIEWRowChangeEventHandler
        
        Public Event CERTIFICATE_VIEWRowDeleting As CERTIFICATE_VIEWRowChangeEventHandler
        
        Public Event CERTIFICATE_VIEWRowDeleted As CERTIFICATE_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCERTIFICATE_VIEWRow(ByVal row As CERTIFICATE_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCERTIFICATE_VIEWRow( _
                    ByVal parentPRODUCTDATA_REPORT_VIEWRowByPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW As PRODUCTDATA_REPORT_VIEWRow,  _
                    ByVal CERTIFICATIONTYPEID As Decimal,  _
                    ByVal CERTIFICATIONTYPENAME As String,  _
                    ByVal CERTIFICATENUMBER As String,  _
                    ByVal DATESUBMITTED As Date,  _
                    ByVal ACTIVESTATUS As String,  _
                    ByVal DATEASSIGNED_EGI As Date,  _
                    ByVal DATEAPPROVED_CEGI As Date,  _
                    ByVal RENEWALREQUIRED_CGIN As String,  _
                    ByVal SUPPLEMENTALREQUIRED_EI As String,  _
                    ByVal SUPPLEMENTALNUMBER_EI As String,  _
                    ByVal JOBREPORTNUMBER_CEN As String,  _
                    ByVal EXTENSION_EN As String,  _
                    ByVal SUPPLEMENTALMOLDSTAMPING_E As String,  _
                    ByVal CERTTYPE As String,  _
                    ByVal EXPIRYDATE_I As Date,  _
                    ByVal EMARKREFERENCE_I As String,  _
                    ByVal FAMILY_I As String,  _
                    ByVal PRODUCTLOCATION_C As String,  _
                    ByVal COUNTRYOFMANUFACTURE_N As String,  _
                    ByVal CUSTOMER_N As String,  _
                    ByVal CUSTOMERSPECIFIC_N As String,  _
                    ByVal IMPORTER_N As String,  _
                    ByVal IMPORTERADDRESS_N As String,  _
                    ByVal IMPORTERREPRESENTATIVE_N As String,  _
                    ByVal COUNTRYLOCATION_N As String,  _
                    ByVal BATCHNUMBER_G As String) As CERTIFICATE_VIEWRow
            Dim rowCERTIFICATE_VIEWRow As CERTIFICATE_VIEWRow = CType(Me.NewRow,CERTIFICATE_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CERTIFICATIONTYPEID, CERTIFICATIONTYPENAME, CERTIFICATENUMBER, DATESUBMITTED, ACTIVESTATUS, DATEASSIGNED_EGI, DATEAPPROVED_CEGI, RENEWALREQUIRED_CGIN, SUPPLEMENTALREQUIRED_EI, SUPPLEMENTALNUMBER_EI, JOBREPORTNUMBER_CEN, EXTENSION_EN, SUPPLEMENTALMOLDSTAMPING_E, CERTTYPE, EXPIRYDATE_I, EMARKREFERENCE_I, FAMILY_I, PRODUCTLOCATION_C, COUNTRYOFMANUFACTURE_N, CUSTOMER_N, CUSTOMERSPECIFIC_N, IMPORTER_N, IMPORTERADDRESS_N, IMPORTERREPRESENTATIVE_N, COUNTRYLOCATION_N, BATCHNUMBER_G}
            If (Not (parentPRODUCTDATA_REPORT_VIEWRowByPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW) Is Nothing) Then
                columnValuesArray(0) = parentPRODUCTDATA_REPORT_VIEWRowByPRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW(0)
            End If
            rowCERTIFICATE_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCERTIFICATE_VIEWRow)
            Return rowCERTIFICATE_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CERTIFICATE_VIEWDataTable = CType(MyBase.Clone,CERTIFICATE_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CERTIFICATE_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSKUID = MyBase.Columns("SKUID")
            Me.columnCERTIFICATIONTYPEID = MyBase.Columns("CERTIFICATIONTYPEID")
            Me.columnCERTIFICATIONTYPENAME = MyBase.Columns("CERTIFICATIONTYPENAME")
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnDATESUBMITTED = MyBase.Columns("DATESUBMITTED")
            Me.columnACTIVESTATUS = MyBase.Columns("ACTIVESTATUS")
            Me.columnDATEASSIGNED_EGI = MyBase.Columns("DATEASSIGNED_EGI")
            Me.columnDATEAPPROVED_CEGI = MyBase.Columns("DATEAPPROVED_CEGI")
            Me.columnRENEWALREQUIRED_CGIN = MyBase.Columns("RENEWALREQUIRED_CGIN")
            Me.columnSUPPLEMENTALREQUIRED_EI = MyBase.Columns("SUPPLEMENTALREQUIRED_EI")
            Me.columnSUPPLEMENTALNUMBER_EI = MyBase.Columns("SUPPLEMENTALNUMBER_EI")
            Me.columnJOBREPORTNUMBER_CEN = MyBase.Columns("JOBREPORTNUMBER_CEN")
            Me.columnEXTENSION_EN = MyBase.Columns("EXTENSION_EN")
            Me.columnSUPPLEMENTALMOLDSTAMPING_E = MyBase.Columns("SUPPLEMENTALMOLDSTAMPING_E")
            Me.columnCERTTYPE = MyBase.Columns("CERTTYPE")
            Me.columnEXPIRYDATE_I = MyBase.Columns("EXPIRYDATE_I")
            Me.columnEMARKREFERENCE_I = MyBase.Columns("EMARKREFERENCE_I")
            Me.columnFAMILY_I = MyBase.Columns("FAMILY_I")
            Me.columnPRODUCTLOCATION_C = MyBase.Columns("PRODUCTLOCATION_C")
            Me.columnCOUNTRYOFMANUFACTURE_N = MyBase.Columns("COUNTRYOFMANUFACTURE_N")
            Me.columnCUSTOMER_N = MyBase.Columns("CUSTOMER_N")
            Me.columnCUSTOMERSPECIFIC_N = MyBase.Columns("CUSTOMERSPECIFIC_N")
            Me.columnIMPORTER_N = MyBase.Columns("IMPORTER_N")
            Me.columnIMPORTERADDRESS_N = MyBase.Columns("IMPORTERADDRESS_N")
            Me.columnIMPORTERREPRESENTATIVE_N = MyBase.Columns("IMPORTERREPRESENTATIVE_N")
            Me.columnCOUNTRYLOCATION_N = MyBase.Columns("COUNTRYLOCATION_N")
            Me.columnBATCHNUMBER_G = MyBase.Columns("BATCHNUMBER_G")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSKUID = New Global.System.Data.DataColumn("SKUID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKUID)
            Me.columnCERTIFICATIONTYPEID = New Global.System.Data.DataColumn("CERTIFICATIONTYPEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATIONTYPEID)
            Me.columnCERTIFICATIONTYPENAME = New Global.System.Data.DataColumn("CERTIFICATIONTYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATIONTYPENAME)
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnDATESUBMITTED = New Global.System.Data.DataColumn("DATESUBMITTED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATESUBMITTED)
            Me.columnACTIVESTATUS = New Global.System.Data.DataColumn("ACTIVESTATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVESTATUS)
            Me.columnDATEASSIGNED_EGI = New Global.System.Data.DataColumn("DATEASSIGNED_EGI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEASSIGNED_EGI)
            Me.columnDATEAPPROVED_CEGI = New Global.System.Data.DataColumn("DATEAPPROVED_CEGI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEAPPROVED_CEGI)
            Me.columnRENEWALREQUIRED_CGIN = New Global.System.Data.DataColumn("RENEWALREQUIRED_CGIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRENEWALREQUIRED_CGIN)
            Me.columnSUPPLEMENTALREQUIRED_EI = New Global.System.Data.DataColumn("SUPPLEMENTALREQUIRED_EI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLEMENTALREQUIRED_EI)
            Me.columnSUPPLEMENTALNUMBER_EI = New Global.System.Data.DataColumn("SUPPLEMENTALNUMBER_EI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLEMENTALNUMBER_EI)
            Me.columnJOBREPORTNUMBER_CEN = New Global.System.Data.DataColumn("JOBREPORTNUMBER_CEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOBREPORTNUMBER_CEN)
            Me.columnEXTENSION_EN = New Global.System.Data.DataColumn("EXTENSION_EN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION_EN)
            Me.columnSUPPLEMENTALMOLDSTAMPING_E = New Global.System.Data.DataColumn("SUPPLEMENTALMOLDSTAMPING_E", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLEMENTALMOLDSTAMPING_E)
            Me.columnCERTTYPE = New Global.System.Data.DataColumn("CERTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTTYPE)
            Me.columnEXPIRYDATE_I = New Global.System.Data.DataColumn("EXPIRYDATE_I", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPIRYDATE_I)
            Me.columnEMARKREFERENCE_I = New Global.System.Data.DataColumn("EMARKREFERENCE_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMARKREFERENCE_I)
            Me.columnFAMILY_I = New Global.System.Data.DataColumn("FAMILY_I", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILY_I)
            Me.columnPRODUCTLOCATION_C = New Global.System.Data.DataColumn("PRODUCTLOCATION_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTLOCATION_C)
            Me.columnCOUNTRYOFMANUFACTURE_N = New Global.System.Data.DataColumn("COUNTRYOFMANUFACTURE_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRYOFMANUFACTURE_N)
            Me.columnCUSTOMER_N = New Global.System.Data.DataColumn("CUSTOMER_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_N)
            Me.columnCUSTOMERSPECIFIC_N = New Global.System.Data.DataColumn("CUSTOMERSPECIFIC_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMERSPECIFIC_N)
            Me.columnIMPORTER_N = New Global.System.Data.DataColumn("IMPORTER_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTER_N)
            Me.columnIMPORTERADDRESS_N = New Global.System.Data.DataColumn("IMPORTERADDRESS_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTERADDRESS_N)
            Me.columnIMPORTERREPRESENTATIVE_N = New Global.System.Data.DataColumn("IMPORTERREPRESENTATIVE_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTERREPRESENTATIVE_N)
            Me.columnCOUNTRYLOCATION_N = New Global.System.Data.DataColumn("COUNTRYLOCATION_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRYLOCATION_N)
            Me.columnBATCHNUMBER_G = New Global.System.Data.DataColumn("BATCHNUMBER_G", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCHNUMBER_G)
            Me.columnSKUID.AllowDBNull = false
            Me.columnCERTIFICATIONTYPEID.AllowDBNull = false
            Me.columnCERTIFICATIONTYPENAME.MaxLength = 50
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnACTIVESTATUS.MaxLength = 4
            Me.columnRENEWALREQUIRED_CGIN.MaxLength = 4
            Me.columnSUPPLEMENTALREQUIRED_EI.MaxLength = 4
            Me.columnSUPPLEMENTALNUMBER_EI.MaxLength = 120
            Me.columnJOBREPORTNUMBER_CEN.MaxLength = 120
            Me.columnEXTENSION_EN.MaxLength = 120
            Me.columnSUPPLEMENTALMOLDSTAMPING_E.MaxLength = 120
            Me.columnEMARKREFERENCE_I.MaxLength = 120
            Me.columnFAMILY_I.MaxLength = 120
            Me.columnPRODUCTLOCATION_C.MaxLength = 200
            Me.columnCOUNTRYOFMANUFACTURE_N.MaxLength = 200
            Me.columnCUSTOMER_N.MaxLength = 400
            Me.columnCUSTOMERSPECIFIC_N.MaxLength = 4
            Me.columnIMPORTER_N.MaxLength = 400
            Me.columnIMPORTERADDRESS_N.MaxLength = 800
            Me.columnIMPORTERREPRESENTATIVE_N.MaxLength = 400
            Me.columnCOUNTRYLOCATION_N.MaxLength = 400
            Me.columnBATCHNUMBER_G.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCERTIFICATE_VIEWRow() As CERTIFICATE_VIEWRow
            Return CType(Me.NewRow,CERTIFICATE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CERTIFICATE_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CERTIFICATE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CERTIFICATE_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent CERTIFICATE_VIEWRowChanged(Me, New CERTIFICATE_VIEWRowChangeEvent(CType(e.Row,CERTIFICATE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CERTIFICATE_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent CERTIFICATE_VIEWRowChanging(Me, New CERTIFICATE_VIEWRowChangeEvent(CType(e.Row,CERTIFICATE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CERTIFICATE_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent CERTIFICATE_VIEWRowDeleted(Me, New CERTIFICATE_VIEWRowChangeEvent(CType(e.Row,CERTIFICATE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CERTIFICATE_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent CERTIFICATE_VIEWRowDeleting(Me, New CERTIFICATE_VIEWRowChangeEvent(CType(e.Row,CERTIFICATE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCERTIFICATE_VIEWRow(ByVal row As CERTIFICATE_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CertificateReport = New CertificateReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CERTIFICATE_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TESTREFERENCE_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCERTIFICATENUMBER As Global.System.Data.DataColumn
        
        Private columnSKUID As Global.System.Data.DataColumn
        
        Private columnMEASUREMENT_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnPLUNGER_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnBEADUNSEAT_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnENDURANCE_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnHIGHSPEED_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnLAB_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnWHEEL_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnNOISE_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnWG_TESTREFERENCE As Global.System.Data.DataColumn
        
        Private columnRR_TESTREFERENCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TESTREFERENCE_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CERTIFICATENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCERTIFICATENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEASUREMENT_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEASUREMENT_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLUNGER_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLUNGER_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BEADUNSEAT_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBEADUNSEAT_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENDURANCE_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDURANCE_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HIGHSPEED_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHIGHSPEED_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LAB_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAB_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHEEL_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHEEL_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOISE_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOISE_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WG_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWG_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RR_TESTREFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRR_TESTREFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TESTREFERENCE_VIEWRow
            Get
                Return CType(Me.Rows(index),TESTREFERENCE_VIEWRow)
            End Get
        End Property
        
        Public Event TESTREFERENCE_VIEWRowChanging As TESTREFERENCE_VIEWRowChangeEventHandler
        
        Public Event TESTREFERENCE_VIEWRowChanged As TESTREFERENCE_VIEWRowChangeEventHandler
        
        Public Event TESTREFERENCE_VIEWRowDeleting As TESTREFERENCE_VIEWRowChangeEventHandler
        
        Public Event TESTREFERENCE_VIEWRowDeleted As TESTREFERENCE_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTESTREFERENCE_VIEWRow(ByVal row As TESTREFERENCE_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTESTREFERENCE_VIEWRow(ByVal CERTIFICATENUMBER As String, ByVal SKUID As Decimal, ByVal MEASUREMENT_TESTREFERENCE As String, ByVal PLUNGER_TESTREFERENCE As String, ByVal BEADUNSEAT_TESTREFERENCE As String, ByVal ENDURANCE_TESTREFERENCE As String, ByVal HIGHSPEED_TESTREFERENCE As String, ByVal LAB_TESTREFERENCE As String, ByVal WHEEL_TESTREFERENCE As String, ByVal NOISE_TESTREFERENCE As String, ByVal WG_TESTREFERENCE As String, ByVal RR_TESTREFERENCE As String) As TESTREFERENCE_VIEWRow
            Dim rowTESTREFERENCE_VIEWRow As TESTREFERENCE_VIEWRow = CType(Me.NewRow,TESTREFERENCE_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {CERTIFICATENUMBER, SKUID, MEASUREMENT_TESTREFERENCE, PLUNGER_TESTREFERENCE, BEADUNSEAT_TESTREFERENCE, ENDURANCE_TESTREFERENCE, HIGHSPEED_TESTREFERENCE, LAB_TESTREFERENCE, WHEEL_TESTREFERENCE, NOISE_TESTREFERENCE, WG_TESTREFERENCE, RR_TESTREFERENCE}
            rowTESTREFERENCE_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTESTREFERENCE_VIEWRow)
            Return rowTESTREFERENCE_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TESTREFERENCE_VIEWDataTable = CType(MyBase.Clone,TESTREFERENCE_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TESTREFERENCE_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCERTIFICATENUMBER = MyBase.Columns("CERTIFICATENUMBER")
            Me.columnSKUID = MyBase.Columns("SKUID")
            Me.columnMEASUREMENT_TESTREFERENCE = MyBase.Columns("MEASUREMENT_TESTREFERENCE")
            Me.columnPLUNGER_TESTREFERENCE = MyBase.Columns("PLUNGER_TESTREFERENCE")
            Me.columnBEADUNSEAT_TESTREFERENCE = MyBase.Columns("BEADUNSEAT_TESTREFERENCE")
            Me.columnENDURANCE_TESTREFERENCE = MyBase.Columns("ENDURANCE_TESTREFERENCE")
            Me.columnHIGHSPEED_TESTREFERENCE = MyBase.Columns("HIGHSPEED_TESTREFERENCE")
            Me.columnLAB_TESTREFERENCE = MyBase.Columns("LAB_TESTREFERENCE")
            Me.columnWHEEL_TESTREFERENCE = MyBase.Columns("WHEEL_TESTREFERENCE")
            Me.columnNOISE_TESTREFERENCE = MyBase.Columns("NOISE_TESTREFERENCE")
            Me.columnWG_TESTREFERENCE = MyBase.Columns("WG_TESTREFERENCE")
            Me.columnRR_TESTREFERENCE = MyBase.Columns("RR_TESTREFERENCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCERTIFICATENUMBER = New Global.System.Data.DataColumn("CERTIFICATENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCERTIFICATENUMBER)
            Me.columnSKUID = New Global.System.Data.DataColumn("SKUID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKUID)
            Me.columnMEASUREMENT_TESTREFERENCE = New Global.System.Data.DataColumn("MEASUREMENT_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEASUREMENT_TESTREFERENCE)
            Me.columnPLUNGER_TESTREFERENCE = New Global.System.Data.DataColumn("PLUNGER_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLUNGER_TESTREFERENCE)
            Me.columnBEADUNSEAT_TESTREFERENCE = New Global.System.Data.DataColumn("BEADUNSEAT_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBEADUNSEAT_TESTREFERENCE)
            Me.columnENDURANCE_TESTREFERENCE = New Global.System.Data.DataColumn("ENDURANCE_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDURANCE_TESTREFERENCE)
            Me.columnHIGHSPEED_TESTREFERENCE = New Global.System.Data.DataColumn("HIGHSPEED_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHIGHSPEED_TESTREFERENCE)
            Me.columnLAB_TESTREFERENCE = New Global.System.Data.DataColumn("LAB_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAB_TESTREFERENCE)
            Me.columnWHEEL_TESTREFERENCE = New Global.System.Data.DataColumn("WHEEL_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHEEL_TESTREFERENCE)
            Me.columnNOISE_TESTREFERENCE = New Global.System.Data.DataColumn("NOISE_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOISE_TESTREFERENCE)
            Me.columnWG_TESTREFERENCE = New Global.System.Data.DataColumn("WG_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWG_TESTREFERENCE)
            Me.columnRR_TESTREFERENCE = New Global.System.Data.DataColumn("RR_TESTREFERENCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRR_TESTREFERENCE)
            Me.columnCERTIFICATENUMBER.AllowDBNull = false
            Me.columnCERTIFICATENUMBER.MaxLength = 80
            Me.columnSKUID.AllowDBNull = false
            Me.columnMEASUREMENT_TESTREFERENCE.MaxLength = 40
            Me.columnPLUNGER_TESTREFERENCE.MaxLength = 40
            Me.columnBEADUNSEAT_TESTREFERENCE.MaxLength = 40
            Me.columnENDURANCE_TESTREFERENCE.MaxLength = 40
            Me.columnHIGHSPEED_TESTREFERENCE.MaxLength = 40
            Me.columnLAB_TESTREFERENCE.MaxLength = 15
            Me.columnWHEEL_TESTREFERENCE.MaxLength = 15
            Me.columnNOISE_TESTREFERENCE.MaxLength = 15
            Me.columnWG_TESTREFERENCE.MaxLength = 15
            Me.columnRR_TESTREFERENCE.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTESTREFERENCE_VIEWRow() As TESTREFERENCE_VIEWRow
            Return CType(Me.NewRow,TESTREFERENCE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TESTREFERENCE_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TESTREFERENCE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TESTREFERENCE_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent TESTREFERENCE_VIEWRowChanged(Me, New TESTREFERENCE_VIEWRowChangeEvent(CType(e.Row,TESTREFERENCE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TESTREFERENCE_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent TESTREFERENCE_VIEWRowChanging(Me, New TESTREFERENCE_VIEWRowChangeEvent(CType(e.Row,TESTREFERENCE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TESTREFERENCE_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent TESTREFERENCE_VIEWRowDeleted(Me, New TESTREFERENCE_VIEWRowChangeEvent(CType(e.Row,TESTREFERENCE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TESTREFERENCE_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent TESTREFERENCE_VIEWRowDeleting(Me, New TESTREFERENCE_VIEWRowChangeEvent(CType(e.Row,TESTREFERENCE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTESTREFERENCE_VIEWRow(ByVal row As TESTREFERENCE_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CertificateReport = New CertificateReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TESTREFERENCE_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRODUCTDATA_REPORT_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTDATA_REPORT_VIEW As PRODUCTDATA_REPORT_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTDATA_REPORT_VIEW = CType(Me.Table,PRODUCTDATA_REPORT_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKUID() As Decimal
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU() As String
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SKUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BRANDCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BRANDCODE' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIRETYPEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIRETYPEID' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NPRID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NPRID' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIZESTAMP() As String
            Get
                Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SIZESTAMPColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SIZESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCONTINUEDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCONTINUEDDATE' in table 'PRODUCTDATA_REPORT_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPECNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECNUMBER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPEEDRATING() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPEEDRATING' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SINGLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SINGLOADINDEX' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUALLOADINDEX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUALLOADINDEX' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BELTEDRADIALYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BELTEDRADIALYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TUBELESSYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TUBELESSYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REINFORCEDYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REINFORCEDYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTRALOADYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTRALOADYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEASURINGRIM() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEASURINGRIM' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UTQGTREADWEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTREADWEAR' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UTQGTRACTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTRACTION' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UTQGTEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UTQGTEMP' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUDSNOWYN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MUDSNOWYN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIMDIAMETER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIMDIAMETER' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CERTIFICATENUMBER' in table 'PRODUCTDATA_REPORT_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTENSION_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION_EN' in table 'PRODUCTDATA_REPORT_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBRANDCODENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBRANDCODENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.BRANDCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIRETYPEIDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIRETYPEIDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TIRETYPEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNPRIDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNPRIDNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.NPRIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISCONTINUEDDATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISCONTINUEDDATENull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.DISCONTINUEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPECNUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPECNUMBERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPECNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPEEDRATINGNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPEEDRATINGNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SPEEDRATINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSINGLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSINGLOADINDEXNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.SINGLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUALLOADINDEXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUALLOADINDEXNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.DUALLOADINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBELTEDRADIALYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBELTEDRADIALYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.BELTEDRADIALYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTUBELESSYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTUBELESSYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.TUBELESSYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREINFORCEDYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREINFORCEDYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.REINFORCEDYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTRALOADYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTRALOADYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTRALOADYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEASURINGRIMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEASURINGRIMNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MEASURINGRIMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUTQGTREADWEARNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUTQGTREADWEARNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTREADWEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUTQGTRACTIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUTQGTRACTIONNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTRACTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUTQGTEMPNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUTQGTEMPNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.UTQGTEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUDSNOWYNNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUDSNOWYNNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.MUDSNOWYNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIMDIAMETERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIMDIAMETERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.RIMDIAMETERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCERTIFICATENUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCERTIFICATENUMBERNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.CERTIFICATENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTENSION_ENNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTENSION_ENNull()
            Me(Me.tablePRODUCTDATA_REPORT_VIEW.EXTENSION_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCERTIFICATE_VIEWRows() As CERTIFICATE_VIEWRow()
            If (Me.Table.ChildRelations("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW") Is Nothing) Then
                Return New CERTIFICATE_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW")),CERTIFICATE_VIEWRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CERTIFICATE_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableCERTIFICATE_VIEW As CERTIFICATE_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCERTIFICATE_VIEW = CType(Me.Table,CERTIFICATE_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKUID() As Decimal
            Get
                Return CType(Me(Me.tableCERTIFICATE_VIEW.SKUIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.SKUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATIONTYPEID() As Decimal
            Get
                Return CType(Me(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPEIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATIONTYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CERTIFICATIONTYPENAME' in table 'CERTIFICATE_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tableCERTIFICATE_VIEW.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATESUBMITTED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.DATESUBMITTEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATESUBMITTED' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.DATESUBMITTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTIVESTATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.ACTIVESTATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVESTATUS' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.ACTIVESTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEASSIGNED_EGI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.DATEASSIGNED_EGIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEASSIGNED_EGI' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.DATEASSIGNED_EGIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEAPPROVED_CEGI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.DATEAPPROVED_CEGIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEAPPROVED_CEGI' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.DATEAPPROVED_CEGIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RENEWALREQUIRED_CGIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.RENEWALREQUIRED_CGINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RENEWALREQUIRED_CGIN' in table 'CERTIFICATE_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.RENEWALREQUIRED_CGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLEMENTALREQUIRED_EI() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALREQUIRED_EIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLEMENTALREQUIRED_EI' in table 'CERTIFICATE_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALREQUIRED_EIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLEMENTALNUMBER_EI() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALNUMBER_EIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLEMENTALNUMBER_EI' in table 'CERTIFICATE_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALNUMBER_EIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JOBREPORTNUMBER_CEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.JOBREPORTNUMBER_CENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JOBREPORTNUMBER_CEN' in table 'CERTIFICATE_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.JOBREPORTNUMBER_CENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTENSION_EN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.EXTENSION_ENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION_EN' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.EXTENSION_ENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLEMENTALMOLDSTAMPING_E() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALMOLDSTAMPING_EColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLEMENTALMOLDSTAMPING_E' in table 'CERTIFICATE_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALMOLDSTAMPING_EColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.CERTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CERTTYPE' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CERTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPIRYDATE_I() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.EXPIRYDATE_IColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPIRYDATE_I' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.EXPIRYDATE_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMARKREFERENCE_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.EMARKREFERENCE_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMARKREFERENCE_I' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.EMARKREFERENCE_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAMILY_I() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.FAMILY_IColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILY_I' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.FAMILY_IColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTLOCATION_C() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.PRODUCTLOCATION_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTLOCATION_C' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.PRODUCTLOCATION_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUNTRYOFMANUFACTURE_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.COUNTRYOFMANUFACTURE_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRYOFMANUFACTURE_N' in table 'CERTIFICATE_VIEW' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.COUNTRYOFMANUFACTURE_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMER_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.CUSTOMER_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_N' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CUSTOMER_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUSTOMERSPECIFIC_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.CUSTOMERSPECIFIC_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMERSPECIFIC_N' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.CUSTOMERSPECIFIC_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTER_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.IMPORTER_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORTER_N' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.IMPORTER_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTERADDRESS_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.IMPORTERADDRESS_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORTERADDRESS_N' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.IMPORTERADDRESS_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTERREPRESENTATIVE_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.IMPORTERREPRESENTATIVE_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORTERREPRESENTATIVE_N' in table 'CERTIFICATE_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.IMPORTERREPRESENTATIVE_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUNTRYLOCATION_N() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.COUNTRYLOCATION_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRYLOCATION_N' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.COUNTRYLOCATION_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCHNUMBER_G() As String
            Get
                Try 
                    Return CType(Me(Me.tableCERTIFICATE_VIEW.BATCHNUMBER_GColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCHNUMBER_G' in table 'CERTIFICATE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERTIFICATE_VIEW.BATCHNUMBER_GColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTDATA_REPORT_VIEWRow() As PRODUCTDATA_REPORT_VIEWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW")),PRODUCTDATA_REPORT_VIEWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PRODUCTDATA_REPORT_VIEW_CERTIFICATE_VIEW"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCERTIFICATIONTYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCERTIFICATIONTYPENAMENull()
            Me(Me.tableCERTIFICATE_VIEW.CERTIFICATIONTYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATESUBMITTEDNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.DATESUBMITTEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATESUBMITTEDNull()
            Me(Me.tableCERTIFICATE_VIEW.DATESUBMITTEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTIVESTATUSNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.ACTIVESTATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTIVESTATUSNull()
            Me(Me.tableCERTIFICATE_VIEW.ACTIVESTATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEASSIGNED_EGINull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.DATEASSIGNED_EGIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEASSIGNED_EGINull()
            Me(Me.tableCERTIFICATE_VIEW.DATEASSIGNED_EGIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEAPPROVED_CEGINull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.DATEAPPROVED_CEGIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEAPPROVED_CEGINull()
            Me(Me.tableCERTIFICATE_VIEW.DATEAPPROVED_CEGIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRENEWALREQUIRED_CGINNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.RENEWALREQUIRED_CGINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRENEWALREQUIRED_CGINNull()
            Me(Me.tableCERTIFICATE_VIEW.RENEWALREQUIRED_CGINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLEMENTALREQUIRED_EINull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALREQUIRED_EIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLEMENTALREQUIRED_EINull()
            Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALREQUIRED_EIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLEMENTALNUMBER_EINull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALNUMBER_EIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLEMENTALNUMBER_EINull()
            Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALNUMBER_EIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJOBREPORTNUMBER_CENNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.JOBREPORTNUMBER_CENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJOBREPORTNUMBER_CENNull()
            Me(Me.tableCERTIFICATE_VIEW.JOBREPORTNUMBER_CENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTENSION_ENNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.EXTENSION_ENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTENSION_ENNull()
            Me(Me.tableCERTIFICATE_VIEW.EXTENSION_ENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLEMENTALMOLDSTAMPING_ENull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALMOLDSTAMPING_EColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLEMENTALMOLDSTAMPING_ENull()
            Me(Me.tableCERTIFICATE_VIEW.SUPPLEMENTALMOLDSTAMPING_EColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCERTTYPENull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.CERTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCERTTYPENull()
            Me(Me.tableCERTIFICATE_VIEW.CERTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPIRYDATE_INull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.EXPIRYDATE_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPIRYDATE_INull()
            Me(Me.tableCERTIFICATE_VIEW.EXPIRYDATE_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMARKREFERENCE_INull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.EMARKREFERENCE_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMARKREFERENCE_INull()
            Me(Me.tableCERTIFICATE_VIEW.EMARKREFERENCE_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAMILY_INull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.FAMILY_IColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAMILY_INull()
            Me(Me.tableCERTIFICATE_VIEW.FAMILY_IColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTLOCATION_CNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.PRODUCTLOCATION_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTLOCATION_CNull()
            Me(Me.tableCERTIFICATE_VIEW.PRODUCTLOCATION_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUNTRYOFMANUFACTURE_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.COUNTRYOFMANUFACTURE_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUNTRYOFMANUFACTURE_NNull()
            Me(Me.tableCERTIFICATE_VIEW.COUNTRYOFMANUFACTURE_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMER_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.CUSTOMER_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMER_NNull()
            Me(Me.tableCERTIFICATE_VIEW.CUSTOMER_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTOMERSPECIFIC_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.CUSTOMERSPECIFIC_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTOMERSPECIFIC_NNull()
            Me(Me.tableCERTIFICATE_VIEW.CUSTOMERSPECIFIC_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTER_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.IMPORTER_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTER_NNull()
            Me(Me.tableCERTIFICATE_VIEW.IMPORTER_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTERADDRESS_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.IMPORTERADDRESS_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTERADDRESS_NNull()
            Me(Me.tableCERTIFICATE_VIEW.IMPORTERADDRESS_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTERREPRESENTATIVE_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.IMPORTERREPRESENTATIVE_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTERREPRESENTATIVE_NNull()
            Me(Me.tableCERTIFICATE_VIEW.IMPORTERREPRESENTATIVE_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUNTRYLOCATION_NNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.COUNTRYLOCATION_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUNTRYLOCATION_NNull()
            Me(Me.tableCERTIFICATE_VIEW.COUNTRYLOCATION_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHNUMBER_GNull() As Boolean
            Return Me.IsNull(Me.tableCERTIFICATE_VIEW.BATCHNUMBER_GColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHNUMBER_GNull()
            Me(Me.tableCERTIFICATE_VIEW.BATCHNUMBER_GColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTESTREFERENCE_VIEWRows() As TESTREFERENCE_VIEWRow()
            If (Me.Table.ChildRelations("CERTIFICATE_VIEW_TESTREFERENCE_VIEW") Is Nothing) Then
                Return New TESTREFERENCE_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CERTIFICATE_VIEW_TESTREFERENCE_VIEW")),TESTREFERENCE_VIEWRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TESTREFERENCE_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableTESTREFERENCE_VIEW As TESTREFERENCE_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTESTREFERENCE_VIEW = CType(Me.Table,TESTREFERENCE_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATENUMBER() As String
            Get
                Return CType(Me(Me.tableTESTREFERENCE_VIEW.CERTIFICATENUMBERColumn),String)
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.CERTIFICATENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKUID() As Decimal
            Get
                Return CType(Me(Me.tableTESTREFERENCE_VIEW.SKUIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.SKUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEASUREMENT_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.MEASUREMENT_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEASUREMENT_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.MEASUREMENT_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLUNGER_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.PLUNGER_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLUNGER_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.PLUNGER_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BEADUNSEAT_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.BEADUNSEAT_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BEADUNSEAT_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.BEADUNSEAT_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENDURANCE_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.ENDURANCE_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENDURANCE_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.ENDURANCE_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HIGHSPEED_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.HIGHSPEED_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HIGHSPEED_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.HIGHSPEED_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LAB_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.LAB_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAB_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.LAB_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHEEL_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.WHEEL_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WHEEL_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.WHEEL_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOISE_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.NOISE_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOISE_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.NOISE_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WG_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.WG_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WG_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.WG_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RR_TESTREFERENCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTESTREFERENCE_VIEW.RR_TESTREFERENCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RR_TESTREFERENCE' in table 'TESTREFERENCE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTESTREFERENCE_VIEW.RR_TESTREFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERTIFICATE_VIEWRowParent() As CERTIFICATE_VIEWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CERTIFICATE_VIEW_TESTREFERENCE_VIEW")),CERTIFICATE_VIEWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CERTIFICATE_VIEW_TESTREFERENCE_VIEW"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEASUREMENT_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.MEASUREMENT_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEASUREMENT_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.MEASUREMENT_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLUNGER_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.PLUNGER_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLUNGER_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.PLUNGER_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBEADUNSEAT_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.BEADUNSEAT_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBEADUNSEAT_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.BEADUNSEAT_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENDURANCE_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.ENDURANCE_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENDURANCE_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.ENDURANCE_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHIGHSPEED_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.HIGHSPEED_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHIGHSPEED_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.HIGHSPEED_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLAB_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.LAB_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLAB_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.LAB_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHEEL_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.WHEEL_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHEEL_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.WHEEL_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOISE_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.NOISE_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOISE_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.NOISE_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWG_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.WG_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWG_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.WG_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRR_TESTREFERENCENull() As Boolean
            Return Me.IsNull(Me.tableTESTREFERENCE_VIEW.RR_TESTREFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRR_TESTREFERENCENull()
            Me(Me.tableTESTREFERENCE_VIEW.RR_TESTREFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRODUCTDATA_REPORT_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTDATA_REPORT_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRODUCTDATA_REPORT_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRODUCTDATA_REPORT_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CERTIFICATE_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CERTIFICATE_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CERTIFICATE_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CERTIFICATE_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TESTREFERENCE_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TESTREFERENCE_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TESTREFERENCE_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TESTREFERENCE_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CertificateReportTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODUCTDATA_REPORT_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CERTIFICATE_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TESTREFERENCE_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
    End Class
End Namespace
